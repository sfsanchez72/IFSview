#!/usr/bin/env python

#import visvis as vv
from matplotlib.widgets import Cursor
from tkFileDialog import askopenfilename
import matplotlib
matplotlib.use('TkAgg')

from numpy import arange, sin, pi
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

from matplotlib.colors import colorConverter
import Tkinter as Tk
import sys

def destroy(e): sys.exit()

import sys
import pyfits
import matplotlib
#matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
#plt.jet()
import numpy as np
from mpl_toolkits.mplot3d  import Axes3D
import math, copy
from matplotlib import pyplot, colors, cm
from matplotlib.colors import LinearSegmentedColormap


global nx_med,ny_med,nz_med,j
global mapFig,filename,ismark,mark
global specFig,isSmark,Smark
global isSpecFig
global click1
global W1,W2,vW1,vW2,Y1,Y2,vY1,vY2,fixY,var_fix
global var_invert
global fitsdata
global listObj,Obj,cObj
global type_spectra
global Wmin,Wmax,Wmin0,Wmax0
global xdata_old,ydata_old
global bright, contrast
global spec2D
spec2D=0

bright=0.5
contrast=0.5

fixY=0
type_spectra=1
cObj=0
xdata_old=0
ydata_old=0




######## CALIFA CTs #############################
cdict = {
'red' : (
(0,1,1),
(0.00392156862745098,0,0),
(0.00784313725490196,0,0),
(0.0117647058823529,0,0),
(0.0156862745098039,0,0),
(0.0196078431372549,0,0),
(0.0235294117647059,0,0),
(0.0274509803921569,0,0),
(0.0313725490196078,0,0),
(0.0352941176470588,0,0),
(0.0392156862745098,0,0),
(0.0431372549019608,0,0),
(0.0470588235294118,0,0),
(0.0509803921568627,0,0),
(0.0549019607843137,0,0),
(0.0588235294117647,0,0),
(0.0627450980392157,0,0),
(0.0666666666666667,0,0),
(0.0705882352941176,0,0),
(0.0745098039215686,0,0),
(0.0784313725490196,0,0),
(0.0823529411764706,0,0),
(0.0862745098039216,0,0),
(0.0901960784313725,0,0),
(0.0941176470588235,0,0),
(0.0980392156862745,0,0),
(0.101960784313725,0,0),
(0.105882352941176,0,0),
(0.109803921568627,0,0),
(0.113725490196078,0,0),
(0.117647058823529,0,0),
(0.12156862745098,0,0),
(0.125490196078431,0,0),
(0.129411764705882,0,0),
(0.133333333333333,0,0),
(0.137254901960784,0,0),
(0.141176470588235,0,0),
(0.145098039215686,0,0),
(0.149019607843137,0,0),
(0.152941176470588,0,0),
(0.156862745098039,0,0),
(0.16078431372549,0,0),
(0.164705882352941,0,0),
(0.168627450980392,0,0),
(0.172549019607843,0,0),
(0.176470588235294,0,0),
(0.180392156862745,0,0),
(0.184313725490196,0,0),
(0.188235294117647,0,0),
(0.192156862745098,0,0),
(0.196078431372549,0.019921875,0.019921875),
(0.2,0.03984375,0.03984375),
(0.203921568627451,0.059765625,0.059765625),
(0.207843137254902,0.0796875,0.0796875),
(0.211764705882353,0.099609375,0.099609375),
(0.215686274509804,0.11953125,0.11953125),
(0.219607843137255,0.139453125,0.139453125),
(0.223529411764706,0.159375,0.159375),
(0.227450980392157,0.179296875,0.179296875),
(0.231372549019608,0.19921875,0.19921875),
(0.235294117647059,0.219140625,0.219140625),
(0.23921568627451,0.2390625,0.2390625),
(0.243137254901961,0.258984375,0.258984375),
(0.247058823529412,0.27890625,0.27890625),
(0.250980392156863,0.298828125,0.298828125),
(0.254901960784314,0.31875,0.31875),
(0.258823529411765,0.338671875,0.338671875),
(0.262745098039216,0.35859375,0.35859375),
(0.266666666666667,0.378515625,0.378515625),
(0.270588235294118,0.3984375,0.3984375),
(0.274509803921569,0.418359375,0.418359375),
(0.27843137254902,0.43828125,0.43828125),
(0.282352941176471,0.458203125,0.458203125),
(0.286274509803922,0.478125,0.478125),
(0.290196078431373,0.498046875,0.498046875),
(0.294117647058824,0.51796875,0.51796875),
(0.298039215686275,0.537890625,0.537890625),
(0.301960784313725,0.5578125,0.5578125),
(0.305882352941176,0.577734375,0.577734375),
(0.309803921568627,0.59765625,0.59765625),
(0.313725490196078,0.617578125,0.617578125),
(0.317647058823529,0.6375,0.6375),
(0.32156862745098,0.657421875,0.657421875),
(0.325490196078431,0.67734375,0.67734375),
(0.329411764705882,0.697265625,0.697265625),
(0.333333333333333,0.7171875,0.7171875),
(0.337254901960784,0.737109375,0.737109375),
(0.341176470588235,0.75703125,0.75703125),
(0.345098039215686,0.776953125,0.776953125),
(0.349019607843137,0.796875,0.796875),
(0.352941176470588,0.816796875,0.816796875),
(0.356862745098039,0.83671875,0.83671875),
(0.36078431372549,0.856640625,0.856640625),
(0.364705882352941,0.8765625,0.8765625),
(0.368627450980392,0.896484375,0.896484375),
(0.372549019607843,0.91640625,0.91640625),
(0.376470588235294,0.936328125,0.936328125),
(0.380392156862745,0.95625,0.95625),
(0.384313725490196,0.976171875,0.976171875),
(0.388235294117647,0.99609375,0.99609375),
(0.392156862745098,0.99609375,0.99609375),
(0.396078431372549,0.99609375,0.99609375),
(0.4,0.99609375,0.99609375),
(0.403921568627451,0.99609375,0.99609375),
(0.407843137254902,0.99609375,0.99609375),
(0.411764705882353,0.99609375,0.99609375),
(0.415686274509804,0.99609375,0.99609375),
(0.419607843137255,0.99609375,0.99609375),
(0.423529411764706,0.99609375,0.99609375),
(0.427450980392157,0.99609375,0.99609375),
(0.431372549019608,0.99609375,0.99609375),
(0.435294117647059,0.99609375,0.99609375),
(0.43921568627451,0.99609375,0.99609375),
(0.443137254901961,0.99609375,0.99609375),
(0.447058823529412,0.99609375,0.99609375),
(0.450980392156863,0.99609375,0.99609375),
(0.454901960784314,0.99609375,0.99609375),
(0.458823529411765,0.99609375,0.99609375),
(0.462745098039216,0.99609375,0.99609375),
(0.466666666666667,0.99609375,0.99609375),
(0.470588235294118,0.99609375,0.99609375),
(0.474509803921569,0.99609375,0.99609375),
(0.47843137254902,0.99609375,0.99609375),
(0.482352941176471,0.99609375,0.99609375),
(0.486274509803922,0.99609375,0.99609375),
(0.490196078431373,0.99609375,0.99609375),
(0.494117647058824,0.99609375,0.99609375),
(0.498039215686275,0.99609375,0.99609375),
(0.501960784313725,0.99609375,0.99609375),
(0.505882352941176,0.99609375,0.99609375),
(0.509803921568627,0.99609375,0.99609375),
(0.513725490196078,0.99609375,0.99609375),
(0.517647058823529,0.99609375,0.99609375),
(0.52156862745098,0.99609375,0.99609375),
(0.525490196078431,0.99609375,0.99609375),
(0.529411764705882,0.99609375,0.99609375),
(0.533333333333333,0.99609375,0.99609375),
(0.537254901960784,0.99609375,0.99609375),
(0.541176470588235,0.99609375,0.99609375),
(0.545098039215686,0.99609375,0.99609375),
(0.549019607843137,0.99609375,0.99609375),
(0.552941176470588,0.99609375,0.99609375),
(0.556862745098039,0.99609375,0.99609375),
(0.56078431372549,0.99609375,0.99609375),
(0.564705882352941,0.99609375,0.99609375),
(0.568627450980392,0.99609375,0.99609375),
(0.572549019607843,0.99609375,0.99609375),
(0.576470588235294,0.99609375,0.99609375),
(0.580392156862745,0.99609375,0.99609375),
(0.584313725490196,0.99609375,0.99609375),
(0.588235294117647,0.98046875,0.98046875),
(0.592156862745098,0.96484375,0.96484375),
(0.596078431372549,0.94921875,0.94921875),
(0.6,0.93359375,0.93359375),
(0.603921568627451,0.91796875,0.91796875),
(0.607843137254902,0.90234375,0.90234375),
(0.611764705882353,0.88671875,0.88671875),
(0.615686274509804,0.87109375,0.87109375),
(0.619607843137255,0.85546875,0.85546875),
(0.623529411764706,0.83984375,0.83984375),
(0.627450980392157,0.82421875,0.82421875),
(0.631372549019608,0.80859375,0.80859375),
(0.635294117647059,0.79296875,0.79296875),
(0.63921568627451,0.77734375,0.77734375),
(0.643137254901961,0.76171875,0.76171875),
(0.647058823529412,0.74609375,0.74609375),
(0.650980392156863,0.73046875,0.73046875),
(0.654901960784314,0.71484375,0.71484375),
(0.658823529411765,0.69921875,0.69921875),
(0.662745098039216,0.68359375,0.68359375),
(0.666666666666667,0.66796875,0.66796875),
(0.670588235294118,0.65234375,0.65234375),
(0.674509803921569,0.63671875,0.63671875),
(0.67843137254902,0.62109375,0.62109375),
(0.682352941176471,0.60546875,0.60546875),
(0.686274509803922,0.58984375,0.58984375),
(0.690196078431373,0.57421875,0.57421875),
(0.694117647058824,0.55859375,0.55859375),
(0.698039215686274,0.54296875,0.54296875),
(0.701960784313725,0.52734375,0.52734375),
(0.705882352941177,0.51171875,0.51171875),
(0.709803921568627,0.49609375,0.49609375),
(0.713725490196078,0.48046875,0.48046875),
(0.717647058823529,0.46484375,0.46484375),
(0.72156862745098,0.44921875,0.44921875),
(0.725490196078431,0.43359375,0.43359375),
(0.729411764705882,0.41796875,0.41796875),
(0.733333333333333,0.40234375,0.40234375),
(0.737254901960784,0.38671875,0.38671875),
(0.741176470588235,0.37109375,0.37109375),
(0.745098039215686,0.35546875,0.35546875),
(0.749019607843137,0.33984375,0.33984375),
(0.752941176470588,0.32421875,0.32421875),
(0.756862745098039,0.30859375,0.30859375),
(0.76078431372549,0.29296875,0.29296875),
(0.764705882352941,0.27734375,0.27734375),
(0.768627450980392,0.26171875,0.26171875),
(0.772549019607843,0.24609375,0.24609375),
(0.776470588235294,0.23046875,0.23046875),
(0.780392156862745,0.21484375,0.21484375),
(0.784313725490196,0.22663359375,0.22663359375),
(0.788235294117647,0.2384234375,0.2384234375),
(0.792156862745098,0.250212890625,0.250212890625),
(0.796078431372549,0.262002734375,0.262002734375),
(0.8,0.273792578125,0.273792578125),
(0.803921568627451,0.285582421875,0.285582421875),
(0.807843137254902,0.297372265625,0.297372265625),
(0.811764705882353,0.309162109375,0.309162109375),
(0.815686274509804,0.3209515625,0.3209515625),
(0.819607843137255,0.33274140625,0.33274140625),
(0.823529411764706,0.34453125,0.34453125),
(0.827450980392157,0.35632109375,0.35632109375),
(0.831372549019608,0.3681109375,0.3681109375),
(0.835294117647059,0.379900390625,0.379900390625),
(0.83921568627451,0.39169140625,0.39169140625),
(0.843137254901961,0.40348046875,0.40348046875),
(0.847058823529412,0.41526953125,0.41526953125),
(0.850980392156863,0.42705859375,0.42705859375),
(0.854901960784314,0.43884765625,0.43884765625),
(0.858823529411765,0.450640625,0.450640625),
(0.862745098039216,0.4624296875,0.4624296875),
(0.866666666666667,0.47421875,0.47421875),
(0.870588235294118,0.4860078125,0.4860078125),
(0.874509803921569,0.497796875,0.497796875),
(0.87843137254902,0.50958984375,0.50958984375),
(0.882352941176471,0.52137890625,0.52137890625),
(0.886274509803922,0.53316796875,0.53316796875),
(0.890196078431373,0.54495703125,0.54495703125),
(0.894117647058824,0.55674609375,0.55674609375),
(0.898039215686275,0.56853515625,0.56853515625),
(0.901960784313726,0.580328125,0.580328125),
(0.905882352941176,0.5921171875,0.5921171875),
(0.909803921568627,0.60390625,0.60390625),
(0.913725490196078,0.6156953125,0.6156953125),
(0.917647058823529,0.627484375,0.627484375),
(0.92156862745098,0.63927734375,0.63927734375),
(0.925490196078431,0.65106640625,0.65106640625),
(0.929411764705882,0.66285546875,0.66285546875),
(0.933333333333333,0.67464453125,0.67464453125),
(0.937254901960784,0.68643359375,0.68643359375),
(0.941176470588235,0.69822265625,0.69822265625),
(0.945098039215686,0.710015625,0.710015625),
(0.949019607843137,0.7218046875,0.7218046875),
(0.952941176470588,0.73359375,0.73359375),
(0.956862745098039,0.7453828125,0.7453828125),
(0.96078431372549,0.757171875,0.757171875),
(0.964705882352941,0.76896484375,0.76896484375),
(0.968627450980392,0.78075390625,0.78075390625),
(0.972549019607843,0.79254296875,0.79254296875),
(0.976470588235294,0.80433203125,0.80433203125),
(0.980392156862745,0.81612109375,0.81612109375),
(0.984313725490196,0.82791015625,0.82791015625),
(0.988235294117647,0.839703125,0.839703125),
(0.992156862745098,0.8514921875,0.8514921875),
(0.996078431372549,0.86328125,0.86328125),
(1,0.99609375,0.99609375)),
'green' : (
(0,1,1),
(0.00392156862745098,0.02984375,0.02984375),
(0.00784313725490196,0.044765625,0.044765625),
(0.0117647058823529,0.0596875,0.0596875),
(0.0156862745098039,0.074609375,0.074609375),
(0.0196078431372549,0.08953125,0.08953125),
(0.0235294117647059,0.104453125,0.104453125),
(0.0274509803921569,0.119375,0.119375),
(0.0313725490196078,0.134296875,0.134296875),
(0.0352941176470588,0.14921875,0.14921875),
(0.0392156862745098,0.164140625,0.164140625),
(0.0431372549019608,0.1790625,0.1790625),
(0.0470588235294118,0.193984375,0.193984375),
(0.0509803921568627,0.20890625,0.20890625),
(0.0549019607843137,0.223828125,0.223828125),
(0.0588235294117647,0.23875,0.23875),
(0.0627450980392157,0.253671875,0.253671875),
(0.0666666666666667,0.26859375,0.26859375),
(0.0705882352941176,0.283515625,0.283515625),
(0.0745098039215686,0.2984375,0.2984375),
(0.0784313725490196,0.313359375,0.313359375),
(0.0823529411764706,0.32828125,0.32828125),
(0.0862745098039216,0.343203125,0.343203125),
(0.0901960784313725,0.358125,0.358125),
(0.0941176470588235,0.373046875,0.373046875),
(0.0980392156862745,0.38796875,0.38796875),
(0.101960784313725,0.402890625,0.402890625),
(0.105882352941176,0.4178125,0.4178125),
(0.109803921568627,0.432734375,0.432734375),
(0.113725490196078,0.44765625,0.44765625),
(0.117647058823529,0.462578125,0.462578125),
(0.12156862745098,0.4775,0.4775),
(0.125490196078431,0.492421875,0.492421875),
(0.129411764705882,0.50734375,0.50734375),
(0.133333333333333,0.522265625,0.522265625),
(0.137254901960784,0.5371875,0.5371875),
(0.141176470588235,0.552109375,0.552109375),
(0.145098039215686,0.56703125,0.56703125),
(0.149019607843137,0.581953125,0.581953125),
(0.152941176470588,0.596875,0.596875),
(0.156862745098039,0.611796875,0.611796875),
(0.16078431372549,0.62671875,0.62671875),
(0.164705882352941,0.641640625,0.641640625),
(0.168627450980392,0.6565625,0.6565625),
(0.172549019607843,0.671484375,0.671484375),
(0.176470588235294,0.68640625,0.68640625),
(0.180392156862745,0.701328125,0.701328125),
(0.184313725490196,0.71625,0.71625),
(0.188235294117647,0.731171875,0.731171875),
(0.192156862745098,0.74609375,0.74609375),
(0.196078431372549,0.731171875,0.731171875),
(0.2,0.71625,0.71625),
(0.203921568627451,0.701328125,0.701328125),
(0.207843137254902,0.68640625,0.68640625),
(0.211764705882353,0.671484375,0.671484375),
(0.215686274509804,0.6565625,0.6565625),
(0.219607843137255,0.641640625,0.641640625),
(0.223529411764706,0.62671875,0.62671875),
(0.227450980392157,0.611796875,0.611796875),
(0.231372549019608,0.596875,0.596875),
(0.235294117647059,0.581953125,0.581953125),
(0.23921568627451,0.56703125,0.56703125),
(0.243137254901961,0.552109375,0.552109375),
(0.247058823529412,0.5371875,0.5371875),
(0.250980392156863,0.522265625,0.522265625),
(0.254901960784314,0.50734375,0.50734375),
(0.258823529411765,0.492421875,0.492421875),
(0.262745098039216,0.4775,0.4775),
(0.266666666666667,0.462578125,0.462578125),
(0.270588235294118,0.44765625,0.44765625),
(0.274509803921569,0.432734375,0.432734375),
(0.27843137254902,0.4178125,0.4178125),
(0.282352941176471,0.402890625,0.402890625),
(0.286274509803922,0.38796875,0.38796875),
(0.290196078431373,0.373046875,0.373046875),
(0.294117647058824,0.358125,0.358125),
(0.298039215686275,0.343203125,0.343203125),
(0.301960784313725,0.32828125,0.32828125),
(0.305882352941176,0.313359375,0.313359375),
(0.309803921568627,0.2984375,0.2984375),
(0.313725490196078,0.283515625,0.283515625),
(0.317647058823529,0.26859375,0.26859375),
(0.32156862745098,0.253671875,0.253671875),
(0.325490196078431,0.23875,0.23875),
(0.329411764705882,0.223828125,0.223828125),
(0.333333333333333,0.20890625,0.20890625),
(0.337254901960784,0.193984375,0.193984375),
(0.341176470588235,0.1790625,0.1790625),
(0.345098039215686,0.164140625,0.164140625),
(0.349019607843137,0.14921875,0.14921875),
(0.352941176470588,0.134296875,0.134296875),
(0.356862745098039,0.119375,0.119375),
(0.36078431372549,0.104453125,0.104453125),
(0.364705882352941,0.08953125,0.08953125),
(0.368627450980392,0.074609375,0.074609375),
(0.372549019607843,0.0596875,0.0596875),
(0.376470588235294,0.044765625,0.044765625),
(0.380392156862745,0.0298437890625,0.0298437890625),
(0.384313725490196,0.014921875,0.014921875),
(0.388235294117647,0,0),
(0.392156862745098,0.012890625,0.012890625),
(0.396078431372549,0.02578125,0.02578125),
(0.4,0.038671875,0.038671875),
(0.403921568627451,0.0515625,0.0515625),
(0.407843137254902,0.064453125,0.064453125),
(0.411764705882353,0.07734375,0.07734375),
(0.415686274509804,0.090234375,0.090234375),
(0.419607843137255,0.103125,0.103125),
(0.423529411764706,0.116015625,0.116015625),
(0.427450980392157,0.12890625,0.12890625),
(0.431372549019608,0.141796875,0.141796875),
(0.435294117647059,0.1546875,0.1546875),
(0.43921568627451,0.167578125,0.167578125),
(0.443137254901961,0.18046875,0.18046875),
(0.447058823529412,0.193359375,0.193359375),
(0.450980392156863,0.20625,0.20625),
(0.454901960784314,0.219140625,0.219140625),
(0.458823529411765,0.23203125,0.23203125),
(0.462745098039216,0.244921875,0.244921875),
(0.466666666666667,0.2578125,0.2578125),
(0.470588235294118,0.270703125,0.270703125),
(0.474509803921569,0.28359375,0.28359375),
(0.47843137254902,0.296484375,0.296484375),
(0.482352941176471,0.309375,0.309375),
(0.486274509803922,0.322265625,0.322265625),
(0.490196078431373,0.33515625,0.33515625),
(0.494117647058824,0.348046875,0.348046875),
(0.498039215686275,0.3609375,0.3609375),
(0.501960784313725,0.373828125,0.373828125),
(0.505882352941176,0.38671875,0.38671875),
(0.509803921568627,0.399609375,0.399609375),
(0.513725490196078,0.4125,0.4125),
(0.517647058823529,0.425390625,0.425390625),
(0.52156862745098,0.43828125,0.43828125),
(0.525490196078431,0.451171875,0.451171875),
(0.529411764705882,0.4640625,0.4640625),
(0.533333333333333,0.476953125,0.476953125),
(0.537254901960784,0.48984375,0.48984375),
(0.541176470588235,0.502734375,0.502734375),
(0.545098039215686,0.515625,0.515625),
(0.549019607843137,0.528515625,0.528515625),
(0.552941176470588,0.54140625,0.54140625),
(0.556862745098039,0.554296875,0.554296875),
(0.56078431372549,0.5671875,0.5671875),
(0.564705882352941,0.580078125,0.580078125),
(0.568627450980392,0.59296875,0.59296875),
(0.572549019607843,0.605859375,0.605859375),
(0.576470588235294,0.61875,0.61875),
(0.580392156862745,0.631640625,0.631640625),
(0.584313725490196,0.64453125,0.64453125),
(0.588235294117647,0.6359375,0.6359375),
(0.592156862745098,0.62734375,0.62734375),
(0.596078431372549,0.61875,0.61875),
(0.6,0.61015625,0.61015625),
(0.603921568627451,0.6015625,0.6015625),
(0.607843137254902,0.59296875,0.59296875),
(0.611764705882353,0.584375,0.584375),
(0.615686274509804,0.57578125,0.57578125),
(0.619607843137255,0.5671875,0.5671875),
(0.623529411764706,0.55859375,0.55859375),
(0.627450980392157,0.55,0.55),
(0.631372549019608,0.54140625,0.54140625),
(0.635294117647059,0.5328125,0.5328125),
(0.63921568627451,0.52421875,0.52421875),
(0.643137254901961,0.515625,0.515625),
(0.647058823529412,0.50703125,0.50703125),
(0.650980392156863,0.4984375,0.4984375),
(0.654901960784314,0.48984375,0.48984375),
(0.658823529411765,0.48125,0.48125),
(0.662745098039216,0.47265625,0.47265625),
(0.666666666666667,0.4640625,0.4640625),
(0.670588235294118,0.45546875,0.45546875),
(0.674509803921569,0.446875,0.446875),
(0.67843137254902,0.43828125,0.43828125),
(0.682352941176471,0.4296875,0.4296875),
(0.686274509803922,0.42109375,0.42109375),
(0.690196078431373,0.4125,0.4125),
(0.694117647058824,0.40390625,0.40390625),
(0.698039215686274,0.3953125,0.3953125),
(0.701960784313725,0.38671875,0.38671875),
(0.705882352941177,0.378125,0.378125),
(0.709803921568627,0.36953125,0.36953125),
(0.713725490196078,0.3609375,0.3609375),
(0.717647058823529,0.35234375,0.35234375),
(0.72156862745098,0.34375,0.34375),
(0.725490196078431,0.33515625,0.33515625),
(0.729411764705882,0.3265625,0.3265625),
(0.733333333333333,0.31796875,0.31796875),
(0.737254901960784,0.309375,0.309375),
(0.741176470588235,0.30078125,0.30078125),
(0.745098039215686,0.2921875,0.2921875),
(0.749019607843137,0.28359375,0.28359375),
(0.752941176470588,0.275,0.275),
(0.756862745098039,0.26640625,0.26640625),
(0.76078431372549,0.2578125,0.2578125),
(0.764705882352941,0.24921875,0.24921875),
(0.768627450980392,0.240625,0.240625),
(0.772549019607843,0.23203125,0.23203125),
(0.776470588235294,0.2234375,0.2234375),
(0.780392156862745,0.21484375,0.21484375),
(0.784313725490196,0.222301171875,0.222301171875),
(0.788235294117647,0.22975859375,0.22975859375),
(0.792156862745098,0.237216015625,0.237216015625),
(0.796078431372549,0.2446734375,0.2446734375),
(0.8,0.252130859375,0.252130859375),
(0.803921568627451,0.259587890625,0.259587890625),
(0.807843137254902,0.2670453125,0.2670453125),
(0.811764705882353,0.274502734375,0.274502734375),
(0.815686274509804,0.28196015625,0.28196015625),
(0.819607843137255,0.289417578125,0.289417578125),
(0.823529411764706,0.296875,0.296875),
(0.827450980392157,0.304332421875,0.304332421875),
(0.831372549019608,0.31178984375,0.31178984375),
(0.835294117647059,0.319247265625,0.319247265625),
(0.83921568627451,0.3267046875,0.3267046875),
(0.843137254901961,0.334162109375,0.334162109375),
(0.847058823529412,0.34161953125,0.34161953125),
(0.850980392156863,0.3490765625,0.3490765625),
(0.854901960784314,0.356533984375,0.356533984375),
(0.858823529411765,0.36399140625,0.36399140625),
(0.862745098039216,0.371448828125,0.371448828125),
(0.866666666666667,0.37890625,0.37890625),
(0.870588235294118,0.386363671875,0.386363671875),
(0.874509803921569,0.3938203125,0.3938203125),
(0.87843137254902,0.40127734375,0.40127734375),
(0.882352941176471,0.408734375,0.408734375),
(0.886274509803922,0.41619140625,0.41619140625),
(0.890196078431373,0.42365234375,0.42365234375),
(0.894117647058824,0.431109375,0.431109375),
(0.898039215686275,0.43856640625,0.43856640625),
(0.901960784313726,0.4460234375,0.4460234375),
(0.905882352941176,0.45348046875,0.45348046875),
(0.909803921568627,0.4609375,0.4609375),
(0.913725490196078,0.46839453125,0.46839453125),
(0.917647058823529,0.4758515625,0.4758515625),
(0.92156862745098,0.48330859375,0.48330859375),
(0.925490196078431,0.490765625,0.490765625),
(0.929411764705882,0.49822265625,0.49822265625),
(0.933333333333333,0.50568359375,0.50568359375),
(0.937254901960784,0.513140625,0.513140625),
(0.941176470588235,0.52059765625,0.52059765625),
(0.945098039215686,0.5280546875,0.5280546875),
(0.949019607843137,0.53551171875,0.53551171875),
(0.952941176470588,0.54296875,0.54296875),
(0.956862745098039,0.55042578125,0.55042578125),
(0.96078431372549,0.5578828125,0.5578828125),
(0.964705882352941,0.56533984375,0.56533984375),
(0.968627450980392,0.572796875,0.572796875),
(0.972549019607843,0.58025390625,0.58025390625),
(0.976470588235294,0.58771484375,0.58771484375),
(0.980392156862745,0.595171875,0.595171875),
(0.984313725490196,0.60262890625,0.60262890625),
(0.988235294117647,0.6100859375,0.6100859375),
(0.992156862745098,0.61754296875,0.61754296875),
(0.996078431372549,0.625,0.625),
(1,0.64453125,0.64453125)),
'blue' : (
(0,1,1),
(0.00392156862745098,0.51984375,0.51984375),
(0.00784313725490196,0.529765625,0.529765625),
(0.0117647058823529,0.5396875,0.5396875),
(0.0156862745098039,0.549609375,0.549609375),
(0.0196078431372549,0.55953125,0.55953125),
(0.0235294117647059,0.569453125,0.569453125),
(0.0274509803921569,0.579375,0.579375),
(0.0313725490196078,0.589296875,0.589296875),
(0.0352941176470588,0.59921875,0.59921875),
(0.0392156862745098,0.609140625,0.609140625),
(0.0431372549019608,0.6190625,0.6190625),
(0.0470588235294118,0.628984375,0.628984375),
(0.0509803921568627,0.63890625,0.63890625),
(0.0549019607843137,0.648828125,0.648828125),
(0.0588235294117647,0.65875,0.65875),
(0.0627450980392157,0.668671875,0.668671875),
(0.0666666666666667,0.67859375,0.67859375),
(0.0705882352941176,0.688515625,0.688515625),
(0.0745098039215686,0.6984375,0.6984375),
(0.0784313725490196,0.708359375,0.708359375),
(0.0823529411764706,0.71828125,0.71828125),
(0.0862745098039216,0.728203125,0.728203125),
(0.0901960784313725,0.738125,0.738125),
(0.0941176470588235,0.748046875,0.748046875),
(0.0980392156862745,0.75796875,0.75796875),
(0.101960784313725,0.767890625,0.767890625),
(0.105882352941176,0.7778125,0.7778125),
(0.109803921568627,0.787734375,0.787734375),
(0.113725490196078,0.79765625,0.79765625),
(0.117647058823529,0.807578125,0.807578125),
(0.12156862745098,0.8175,0.8175),
(0.125490196078431,0.827421875,0.827421875),
(0.129411764705882,0.83734375,0.83734375),
(0.133333333333333,0.847265625,0.847265625),
(0.137254901960784,0.8571875,0.8571875),
(0.141176470588235,0.867109375,0.867109375),
(0.145098039215686,0.87703125,0.87703125),
(0.149019607843137,0.886953125,0.886953125),
(0.152941176470588,0.896875,0.896875),
(0.156862745098039,0.906796875,0.906796875),
(0.16078431372549,0.91671875,0.91671875),
(0.164705882352941,0.926640625,0.926640625),
(0.168627450980392,0.9365625,0.9365625),
(0.172549019607843,0.946484375,0.946484375),
(0.176470588235294,0.95640625,0.95640625),
(0.180392156862745,0.966328125,0.966328125),
(0.184313725490196,0.97625,0.97625),
(0.188235294117647,0.986171875,0.986171875),
(0.192156862745098,0.99609375,0.99609375),
(0.196078431372549,0.976171875,0.976171875),
(0.2,0.95625,0.95625),
(0.203921568627451,0.936328125,0.936328125),
(0.207843137254902,0.91640625,0.91640625),
(0.211764705882353,0.896484375,0.896484375),
(0.215686274509804,0.8765625,0.8765625),
(0.219607843137255,0.856640625,0.856640625),
(0.223529411764706,0.83671875,0.83671875),
(0.227450980392157,0.816796875,0.816796875),
(0.231372549019608,0.796875,0.796875),
(0.235294117647059,0.776953125,0.776953125),
(0.23921568627451,0.75703125,0.75703125),
(0.243137254901961,0.737109375,0.737109375),
(0.247058823529412,0.7171875,0.7171875),
(0.250980392156863,0.697265625,0.697265625),
(0.254901960784314,0.67734375,0.67734375),
(0.258823529411765,0.657421875,0.657421875),
(0.262745098039216,0.6375,0.6375),
(0.266666666666667,0.617578125,0.617578125),
(0.270588235294118,0.59765625,0.59765625),
(0.274509803921569,0.577734375,0.577734375),
(0.27843137254902,0.5578125,0.5578125),
(0.282352941176471,0.537890625,0.537890625),
(0.286274509803922,0.51796875,0.51796875),
(0.290196078431373,0.498046875,0.498046875),
(0.294117647058824,0.478125,0.478125),
(0.298039215686275,0.458203125,0.458203125),
(0.301960784313725,0.43828125,0.43828125),
(0.305882352941176,0.418359375,0.418359375),
(0.309803921568627,0.3984375,0.3984375),
(0.313725490196078,0.378515625,0.378515625),
(0.317647058823529,0.35859375,0.35859375),
(0.32156862745098,0.338671875,0.338671875),
(0.325490196078431,0.31875,0.31875),
(0.329411764705882,0.298828125,0.298828125),
(0.333333333333333,0.27890625,0.27890625),
(0.337254901960784,0.258984375,0.258984375),
(0.341176470588235,0.2390625,0.2390625),
(0.345098039215686,0.219140625,0.219140625),
(0.349019607843137,0.19921875,0.19921875),
(0.352941176470588,0.179296875,0.179296875),
(0.356862745098039,0.159375,0.159375),
(0.36078431372549,0.139453125,0.139453125),
(0.364705882352941,0.11953125,0.11953125),
(0.368627450980392,0.099609375,0.099609375),
(0.372549019607843,0.0796875,0.0796875),
(0.376470588235294,0.059765625,0.059765625),
(0.380392156862745,0.03984375,0.03984375),
(0.384313725490196,0.019921875,0.019921875),
(0.388235294117647,0,0),
(0.392156862745098,0,0),
(0.396078431372549,0,0),
(0.4,0,0),
(0.403921568627451,0,0),
(0.407843137254902,0,0),
(0.411764705882353,0,0),
(0.415686274509804,0,0),
(0.419607843137255,0,0),
(0.423529411764706,0,0),
(0.427450980392157,0,0),
(0.431372549019608,0,0),
(0.435294117647059,0,0),
(0.43921568627451,0,0),
(0.443137254901961,0,0),
(0.447058823529412,0,0),
(0.450980392156863,0,0),
(0.454901960784314,0,0),
(0.458823529411765,0,0),
(0.462745098039216,0,0),
(0.466666666666667,0,0),
(0.470588235294118,0,0),
(0.474509803921569,0,0),
(0.47843137254902,0,0),
(0.482352941176471,0,0),
(0.486274509803922,0,0),
(0.490196078431373,0,0),
(0.494117647058824,0,0),
(0.498039215686275,0,0),
(0.501960784313725,0,0),
(0.505882352941176,0,0),
(0.509803921568627,0,0),
(0.513725490196078,0,0),
(0.517647058823529,0,0),
(0.52156862745098,0,0),
(0.525490196078431,0,0),
(0.529411764705882,0,0),
(0.533333333333333,0,0),
(0.537254901960784,0,0),
(0.541176470588235,0,0),
(0.545098039215686,0,0),
(0.549019607843137,0,0),
(0.552941176470588,0,0),
(0.556862745098039,0,0),
(0.56078431372549,0,0),
(0.564705882352941,0,0),
(0.568627450980392,0,0),
(0.572549019607843,0,0),
(0.576470588235294,0,0),
(0.580392156862745,0,0),
(0.584313725490196,0,0),
(0.588235294117647,0.004296875,0.004296875),
(0.592156862745098,0.00859375,0.00859375),
(0.596078431372549,0.012890625,0.012890625),
(0.6,0.0171875,0.0171875),
(0.603921568627451,0.021484375,0.021484375),
(0.607843137254902,0.02578125,0.02578125),
(0.611764705882353,0.030078125,0.030078125),
(0.615686274509804,0.034375,0.034375),
(0.619607843137255,0.038671875,0.038671875),
(0.623529411764706,0.04296875,0.04296875),
(0.627450980392157,0.047265625,0.047265625),
(0.631372549019608,0.0515625,0.0515625),
(0.635294117647059,0.055859375,0.055859375),
(0.63921568627451,0.06015625,0.06015625),
(0.643137254901961,0.064453125,0.064453125),
(0.647058823529412,0.06875,0.06875),
(0.650980392156863,0.073046875,0.073046875),
(0.654901960784314,0.07734375,0.07734375),
(0.658823529411765,0.081640625,0.081640625),
(0.662745098039216,0.0859375,0.0859375),
(0.666666666666667,0.090234375,0.090234375),
(0.670588235294118,0.09453125,0.09453125),
(0.674509803921569,0.098828125,0.098828125),
(0.67843137254902,0.103125,0.103125),
(0.682352941176471,0.107421875,0.107421875),
(0.686274509803922,0.11171875,0.11171875),
(0.690196078431373,0.116015625,0.116015625),
(0.694117647058824,0.1203125,0.1203125),
(0.698039215686274,0.124609375,0.124609375),
(0.701960784313725,0.12890625,0.12890625),
(0.705882352941177,0.133203125,0.133203125),
(0.709803921568627,0.1375,0.1375),
(0.713725490196078,0.141796875,0.141796875),
(0.717647058823529,0.14609375,0.14609375),
(0.72156862745098,0.150390625,0.150390625),
(0.725490196078431,0.1546875,0.1546875),
(0.729411764705882,0.158984375,0.158984375),
(0.733333333333333,0.16328125,0.16328125),
(0.737254901960784,0.167578125,0.167578125),
(0.741176470588235,0.171875,0.171875),
(0.745098039215686,0.176171875,0.176171875),
(0.749019607843137,0.18046875,0.18046875),
(0.752941176470588,0.184765625,0.184765625),
(0.756862745098039,0.1890625,0.1890625),
(0.76078431372549,0.193359375,0.193359375),
(0.764705882352941,0.19765625,0.19765625),
(0.768627450980392,0.201953125,0.201953125),
(0.772549019607843,0.20625,0.20625),
(0.776470588235294,0.210546875,0.210546875),
(0.780392156862745,0.21484375,0.21484375),
(0.784313725490196,0.22663359375,0.22663359375),
(0.788235294117647,0.2384234375,0.2384234375),
(0.792156862745098,0.250212890625,0.250212890625),
(0.796078431372549,0.262002734375,0.262002734375),
(0.8,0.273792578125,0.273792578125),
(0.803921568627451,0.285582421875,0.285582421875),
(0.807843137254902,0.297372265625,0.297372265625),
(0.811764705882353,0.309162109375,0.309162109375),
(0.815686274509804,0.3209515625,0.3209515625),
(0.819607843137255,0.33274140625,0.33274140625),
(0.823529411764706,0.34453125,0.34453125),
(0.827450980392157,0.35632109375,0.35632109375),
(0.831372549019608,0.3681109375,0.3681109375),
(0.835294117647059,0.379900390625,0.379900390625),
(0.83921568627451,0.39169140625,0.39169140625),
(0.843137254901961,0.40348046875,0.40348046875),
(0.847058823529412,0.41526953125,0.41526953125),
(0.850980392156863,0.42705859375,0.42705859375),
(0.854901960784314,0.43884765625,0.43884765625),
(0.858823529411765,0.450640625,0.450640625),
(0.862745098039216,0.4624296875,0.4624296875),
(0.866666666666667,0.47421875,0.47421875),
(0.870588235294118,0.4860078125,0.4860078125),
(0.874509803921569,0.497796875,0.497796875),
(0.87843137254902,0.50958984375,0.50958984375),
(0.882352941176471,0.52137890625,0.52137890625),
(0.886274509803922,0.53316796875,0.53316796875),
(0.890196078431373,0.54495703125,0.54495703125),
(0.894117647058824,0.55674609375,0.55674609375),
(0.898039215686275,0.56853515625,0.56853515625),
(0.901960784313726,0.580328125,0.580328125),
(0.905882352941176,0.5921171875,0.5921171875),
(0.909803921568627,0.60390625,0.60390625),
(0.913725490196078,0.6156953125,0.6156953125),
(0.917647058823529,0.627484375,0.627484375),
(0.92156862745098,0.63927734375,0.63927734375),
(0.925490196078431,0.65106640625,0.65106640625),
(0.929411764705882,0.66285546875,0.66285546875),
(0.933333333333333,0.67464453125,0.67464453125),
(0.937254901960784,0.68643359375,0.68643359375),
(0.941176470588235,0.69822265625,0.69822265625),
(0.945098039215686,0.710015625,0.710015625),
(0.949019607843137,0.7218046875,0.7218046875),
(0.952941176470588,0.73359375,0.73359375),
(0.956862745098039,0.7453828125,0.7453828125),
(0.96078431372549,0.757171875,0.757171875),
(0.964705882352941,0.76896484375,0.76896484375),
(0.968627450980392,0.78075390625,0.78075390625),
(0.972549019607843,0.79254296875,0.79254296875),
(0.976470588235294,0.80433203125,0.80433203125),
(0.980392156862745,0.81612109375,0.81612109375),
(0.984313725490196,0.82791015625,0.82791015625),
(0.988235294117647,0.839703125,0.839703125),
(0.992156862745098,0.8514921875,0.8514921875),
(0.996078431372549,0.86328125,0.86328125),
(1,0,0)),
 }

vcdict = {
'red' : (
(0,1,1),
(0.00392156862745098,0.54508984375,0.54508984375),
(0.00784313725490196,0.5285703125,0.5285703125),
(0.0117647058823529,0.5120546875,0.5120546875),
(0.0156862745098039,0.49553515625,0.49553515625),
(0.0196078431372549,0.47901953125,0.47901953125),
(0.0235294117647059,0.4625,0.4625),
(0.0274509803921569,0.44598046875,0.44598046875),
(0.0313725490196078,0.42946484375,0.42946484375),
(0.0352941176470588,0.4129453125,0.4129453125),
(0.0392156862745098,0.3964296875,0.3964296875),
(0.0431372549019608,0.379910546875,0.379910546875),
(0.0470588235294118,0.36339296875,0.36339296875),
(0.0509803921568627,0.346875,0.346875),
(0.0549019607843137,0.33035703125,0.33035703125),
(0.0588235294117647,0.313839453125,0.313839453125),
(0.0627450980392157,0.297321484375,0.297321484375),
(0.0666666666666667,0.280803515625,0.280803515625),
(0.0705882352941176,0.2642859375,0.2642859375),
(0.0745098039215686,0.24776796875,0.24776796875),
(0.0784313725490196,0.23125,0.23125),
(0.0823529411764706,0.21473203125,0.21473203125),
(0.0862745098039216,0.198214453125,0.198214453125),
(0.0901960784313725,0.181696484375,0.181696484375),
(0.0941176470588235,0.165178515625,0.165178515625),
(0.0980392156862745,0.148660546875,0.148660546875),
(0.101960784313725,0.13214296875,0.13214296875),
(0.105882352941176,0.115625,0.115625),
(0.109803921568627,0.09910703125,0.09910703125),
(0.113725490196078,0.082589453125,0.082589453125),
(0.117647058823529,0.066071484375,0.066071484375),
(0.12156862745098,0.049553515625,0.049553515625),
(0.125490196078431,0.0330357421875,0.0330357421875),
(0.129411764705882,0.016517890625,0.016517890625),
(0.133333333333333,0,0),
(0.137254901960784,0,0),
(0.141176470588235,0,0),
(0.145098039215686,0,0),
(0.149019607843137,0,0),
(0.152941176470588,0,0),
(0.156862745098039,0,0),
(0.16078431372549,0,0),
(0.164705882352941,0,0),
(0.168627450980392,0,0),
(0.172549019607843,0,0),
(0.176470588235294,0,0),
(0.180392156862745,0,0),
(0.184313725490196,0,0),
(0.188235294117647,0,0),
(0.192156862745098,0,0),
(0.196078431372549,0,0),
(0.2,0,0),
(0.203921568627451,0,0),
(0.207843137254902,0,0),
(0.211764705882353,0,0),
(0.215686274509804,0,0),
(0.219607843137255,0,0),
(0.223529411764706,0,0),
(0.227450980392157,0,0),
(0.231372549019608,0,0),
(0.235294117647059,0,0),
(0.23921568627451,0,0),
(0.243137254901961,0,0),
(0.247058823529412,0,0),
(0.250980392156863,0,0),
(0.254901960784314,0,0),
(0.258823529411765,0,0),
(0.262745098039216,0,0),
(0.266666666666667,0,0),
(0.270588235294118,0,0),
(0.274509803921569,0,0),
(0.27843137254902,0,0),
(0.282352941176471,0,0),
(0.286274509803922,0,0),
(0.290196078431373,0,0),
(0.294117647058824,0,0),
(0.298039215686275,0,0),
(0.301960784313725,0,0),
(0.305882352941176,0,0),
(0.309803921568627,0,0),
(0.313725490196078,0,0),
(0.317647058823529,0,0),
(0.32156862745098,0,0),
(0.325490196078431,0,0),
(0.329411764705882,0,0),
(0.333333333333333,0,0),
(0.337254901960784,0,0),
(0.341176470588235,0,0),
(0.345098039215686,0,0),
(0.349019607843137,0,0),
(0.352941176470588,0.0061383984375,0.0061383984375),
(0.356862745098039,0.012276796875,0.012276796875),
(0.36078431372549,0.0184151953125,0.0184151953125),
(0.364705882352941,0.0245535546875,0.0245535546875),
(0.368627450980392,0.030691953125,0.030691953125),
(0.372549019607843,0.0368303515625,0.0368303515625),
(0.376470588235294,0.04296875,0.04296875),
(0.380392156862745,0.04910703125,0.04910703125),
(0.384313725490196,0.055245703125,0.055245703125),
(0.388235294117647,0.061383984375,0.061383984375),
(0.392156862745098,0.067522265625,0.067522265625),
(0.396078431372549,0.073660546875,0.073660546875),
(0.4,0.07979921875,0.07979921875),
(0.403921568627451,0.0859375,0.0859375),
(0.407843137254902,0.09207578125,0.09207578125),
(0.411764705882353,0.098214453125,0.098214453125),
(0.415686274509804,0.104352734375,0.104352734375),
(0.419607843137255,0.110491015625,0.110491015625),
(0.423529411764706,0.116629296875,0.116629296875),
(0.427450980392157,0.12276796875,0.12276796875),
(0.431372549019608,0.12890625,0.12890625),
(0.435294117647059,0.13504453125,0.13504453125),
(0.43921568627451,0.141183203125,0.141183203125),
(0.443137254901961,0.147321484375,0.147321484375),
(0.447058823529412,0.153459765625,0.153459765625),
(0.450980392156863,0.159598046875,0.159598046875),
(0.454901960784314,0.16573671875,0.16573671875),
(0.458823529411765,0.171875,0.171875),
(0.462745098039216,0.17801328125,0.17801328125),
(0.466666666666667,0.184151953125,0.184151953125),
(0.470588235294118,0.190290234375,0.190290234375),
(0.474509803921569,0.196428515625,0.196428515625),
(0.47843137254902,0.202566796875,0.202566796875),
(0.482352941176471,0.20870546875,0.20870546875),
(0.486274509803922,0.21484375,0.21484375),
(0.490196078431373,0.233370703125,0.233370703125),
(0.494117647058824,0.251897265625,0.251897265625),
(0.498039215686275,0.27042421875,0.27042421875),
(0.501960784313725,0.28895078125,0.28895078125),
(0.505882352941176,0.307477734375,0.307477734375),
(0.509803921568627,0.326004296875,0.326004296875),
(0.513725490196078,0.34453125,0.34453125),
(0.517647058823529,0.363058203125,0.363058203125),
(0.52156862745098,0.381584765625,0.381584765625),
(0.525490196078431,0.40011328125,0.40011328125),
(0.529411764705882,0.41863671875,0.41863671875),
(0.533333333333333,0.4371640625,0.4371640625),
(0.537254901960784,0.45569140625,0.45569140625),
(0.541176470588235,0.47421875,0.47421875),
(0.545098039215686,0.49274609375,0.49274609375),
(0.549019607843137,0.5112734375,0.5112734375),
(0.552941176470588,0.52980078125,0.52980078125),
(0.556862745098039,0.54832421875,0.54832421875),
(0.56078431372549,0.5668515625,0.5668515625),
(0.564705882352941,0.58537890625,0.58537890625),
(0.568627450980392,0.60390625,0.60390625),
(0.572549019607843,0.62243359375,0.62243359375),
(0.576470588235294,0.6409609375,0.6409609375),
(0.580392156862745,0.65948828125,0.65948828125),
(0.584313725490196,0.67801171875,0.67801171875),
(0.588235294117647,0.6965390625,0.6965390625),
(0.592156862745098,0.71506640625,0.71506640625),
(0.596078431372549,0.73359375,0.73359375),
(0.6,0.75212109375,0.75212109375),
(0.603921568627451,0.7706484375,0.7706484375),
(0.607843137254902,0.78917578125,0.78917578125),
(0.611764705882353,0.80769921875,0.80769921875),
(0.615686274509804,0.8262265625,0.8262265625),
(0.619607843137255,0.84475390625,0.84475390625),
(0.623529411764706,0.86328125,0.86328125),
(0.627450980392157,0.86549609375,0.86549609375),
(0.631372549019608,0.86770703125,0.86770703125),
(0.635294117647059,0.869921875,0.869921875),
(0.63921568627451,0.87213671875,0.87213671875),
(0.643137254901961,0.87434765625,0.87434765625),
(0.647058823529412,0.8765625,0.8765625),
(0.650980392156863,0.87877734375,0.87877734375),
(0.654901960784314,0.88098828125,0.88098828125),
(0.658823529411765,0.883203125,0.883203125),
(0.662745098039216,0.88541796875,0.88541796875),
(0.666666666666667,0.88762890625,0.88762890625),
(0.670588235294118,0.88984375,0.88984375),
(0.674509803921569,0.89205859375,0.89205859375),
(0.67843137254902,0.89426953125,0.89426953125),
(0.682352941176471,0.896484375,0.896484375),
(0.686274509803922,0.89869921875,0.89869921875),
(0.690196078431373,0.90091015625,0.90091015625),
(0.694117647058824,0.903125,0.903125),
(0.698039215686274,0.90533984375,0.90533984375),
(0.701960784313725,0.90755078125,0.90755078125),
(0.705882352941177,0.909765625,0.909765625),
(0.709803921568627,0.91198046875,0.91198046875),
(0.713725490196078,0.91419140625,0.91419140625),
(0.717647058823529,0.91640625,0.91640625),
(0.72156862745098,0.91862109375,0.91862109375),
(0.725490196078431,0.92083203125,0.92083203125),
(0.729411764705882,0.923046875,0.923046875),
(0.733333333333333,0.92526171875,0.92526171875),
(0.737254901960784,0.92747265625,0.92747265625),
(0.741176470588235,0.9296875,0.9296875),
(0.745098039215686,0.93190234375,0.93190234375),
(0.749019607843137,0.93411328125,0.93411328125),
(0.752941176470588,0.936328125,0.936328125),
(0.756862745098039,0.93854296875,0.93854296875),
(0.76078431372549,0.94075390625,0.94075390625),
(0.764705882352941,0.94296875,0.94296875),
(0.768627450980392,0.94518359375,0.94518359375),
(0.772549019607843,0.94739453125,0.94739453125),
(0.776470588235294,0.949609375,0.949609375),
(0.780392156862745,0.95182421875,0.95182421875),
(0.784313725490196,0.95403515625,0.95403515625),
(0.788235294117647,0.95625,0.95625),
(0.792156862745098,0.95846484375,0.95846484375),
(0.796078431372549,0.96067578125,0.96067578125),
(0.8,0.962890625,0.962890625),
(0.803921568627451,0.96510546875,0.96510546875),
(0.807843137254902,0.96731640625,0.96731640625),
(0.811764705882353,0.96953125,0.96953125),
(0.815686274509804,0.97174609375,0.97174609375),
(0.819607843137255,0.97395703125,0.97395703125),
(0.823529411764706,0.976171875,0.976171875),
(0.827450980392157,0.97838671875,0.97838671875),
(0.831372549019608,0.98059765625,0.98059765625),
(0.835294117647059,0.9828125,0.9828125),
(0.83921568627451,0.98502734375,0.98502734375),
(0.843137254901961,0.98723828125,0.98723828125),
(0.847058823529412,0.989453125,0.989453125),
(0.850980392156863,0.99166796875,0.99166796875),
(0.854901960784314,0.99387890625,0.99387890625),
(0.858823529411765,0.99609375,0.99609375),
(0.862745098039216,0.99609375,0.99609375),
(0.866666666666667,0.99609375,0.99609375),
(0.870588235294118,0.99609375,0.99609375),
(0.874509803921569,0.99609375,0.99609375),
(0.87843137254902,0.99609375,0.99609375),
(0.882352941176471,0.99609375,0.99609375),
(0.886274509803922,0.99609375,0.99609375),
(0.890196078431373,0.99609375,0.99609375),
(0.894117647058824,0.99609375,0.99609375),
(0.898039215686275,0.99609375,0.99609375),
(0.901960784313726,0.99609375,0.99609375),
(0.905882352941176,0.99609375,0.99609375),
(0.909803921568627,0.99609375,0.99609375),
(0.913725490196078,0.99609375,0.99609375),
(0.917647058823529,0.99609375,0.99609375),
(0.92156862745098,0.99609375,0.99609375),
(0.925490196078431,0.99609375,0.99609375),
(0.929411764705882,0.99609375,0.99609375),
(0.933333333333333,0.99609375,0.99609375),
(0.937254901960784,0.99609375,0.99609375),
(0.941176470588235,0.99609375,0.99609375),
(0.945098039215686,0.99609375,0.99609375),
(0.949019607843137,0.99609375,0.99609375),
(0.952941176470588,0.99609375,0.99609375),
(0.956862745098039,0.99609375,0.99609375),
(0.96078431372549,0.99609375,0.99609375),
(0.964705882352941,0.99609375,0.99609375),
(0.968627450980392,0.99609375,0.99609375),
(0.972549019607843,0.99609375,0.99609375),
(0.976470588235294,0.99609375,0.99609375),
(0.980392156862745,0.99609375,0.99609375),
(0.984313725490196,0.99609375,0.99609375),
(0.988235294117647,0.99609375,0.99609375),
(0.992156862745098,0.99609375,0.99609375),
(0.996078431372549,0.99609375,0.99609375),
(1,0.99609375,0.99609375)),
'green' : (
(0,1,1),
(0.00392156862745098,0,0),
(0.00784313725490196,0,0),
(0.0117647058823529,0,0),
(0.0156862745098039,0,0),
(0.0196078431372549,0,0),
(0.0235294117647059,0,0),
(0.0274509803921569,0,0),
(0.0313725490196078,0,0),
(0.0352941176470588,0,0),
(0.0392156862745098,0,0),
(0.0431372549019608,0,0),
(0.0470588235294118,0,0),
(0.0509803921568627,0,0),
(0.0549019607843137,0,0),
(0.0588235294117647,0,0),
(0.0627450980392157,0,0),
(0.0666666666666667,0,0),
(0.0705882352941176,0,0),
(0.0745098039215686,0,0),
(0.0784313725490196,0,0),
(0.0823529411764706,0,0),
(0.0862745098039216,0,0),
(0.0901960784313725,0,0),
(0.0941176470588235,0,0),
(0.0980392156862745,0,0),
(0.101960784313725,0,0),
(0.105882352941176,0,0),
(0.109803921568627,0,0),
(0.113725490196078,0,0),
(0.117647058823529,0,0),
(0.12156862745098,0,0),
(0.125490196078431,0,0),
(0.129411764705882,0,0),
(0.133333333333333,0,0),
(0.137254901960784,0.0135653515625,0.0135653515625),
(0.141176470588235,0.0271306640625,0.0271306640625),
(0.145098039215686,0.04069609375,0.04069609375),
(0.149019607843137,0.054261328125,0.054261328125),
(0.152941176470588,0.0678265625,0.0678265625),
(0.156862745098039,0.0813921875,0.0813921875),
(0.16078431372549,0.094957421875,0.094957421875),
(0.164705882352941,0.10852265625,0.10852265625),
(0.168627450980392,0.122087890625,0.122087890625),
(0.172549019607843,0.135653515625,0.135653515625),
(0.176470588235294,0.14921875,0.14921875),
(0.180392156862745,0.162783984375,0.162783984375),
(0.184313725490196,0.176349609375,0.176349609375),
(0.188235294117647,0.18991484375,0.18991484375),
(0.192156862745098,0.203480078125,0.203480078125),
(0.196078431372549,0.2170453125,0.2170453125),
(0.2,0.2306109375,0.2306109375),
(0.203921568627451,0.244176171875,0.244176171875),
(0.207843137254902,0.25774140625,0.25774140625),
(0.211764705882353,0.27130703125,0.27130703125),
(0.215686274509804,0.284872265625,0.284872265625),
(0.219607843137255,0.2984375,0.2984375),
(0.223529411764706,0.312002734375,0.312002734375),
(0.227450980392157,0.325568359375,0.325568359375),
(0.231372549019608,0.33913359375,0.33913359375),
(0.235294117647059,0.352698828125,0.352698828125),
(0.23921568627451,0.3662640625,0.3662640625),
(0.243137254901961,0.3798296875,0.3798296875),
(0.247058823529412,0.39339453125,0.39339453125),
(0.250980392156863,0.4069609375,0.4069609375),
(0.254901960784314,0.42052734375,0.42052734375),
(0.258823529411765,0.43408984375,0.43408984375),
(0.262745098039216,0.44765625,0.44765625),
(0.266666666666667,0.46122265625,0.46122265625),
(0.270588235294118,0.47478515625,0.47478515625),
(0.274509803921569,0.4883515625,0.4883515625),
(0.27843137254902,0.50191796875,0.50191796875),
(0.282352941176471,0.515484375,0.515484375),
(0.286274509803922,0.529046875,0.529046875),
(0.290196078431373,0.54261328125,0.54261328125),
(0.294117647058824,0.5561796875,0.5561796875),
(0.298039215686275,0.56974609375,0.56974609375),
(0.301960784313725,0.58330859375,0.58330859375),
(0.305882352941176,0.596875,0.596875),
(0.309803921568627,0.61044140625,0.61044140625),
(0.313725490196078,0.62400390625,0.62400390625),
(0.317647058823529,0.6375703125,0.6375703125),
(0.32156862745098,0.65113671875,0.65113671875),
(0.325490196078431,0.664703125,0.664703125),
(0.329411764705882,0.678265625,0.678265625),
(0.333333333333333,0.69183203125,0.69183203125),
(0.337254901960784,0.7053984375,0.7053984375),
(0.341176470588235,0.71896484375,0.71896484375),
(0.345098039215686,0.73252734375,0.73252734375),
(0.349019607843137,0.74609375,0.74609375),
(0.352941176470588,0.7309140625,0.7309140625),
(0.356862745098039,0.71573828125,0.71573828125),
(0.36078431372549,0.70055859375,0.70055859375),
(0.364705882352941,0.68537890625,0.68537890625),
(0.368627450980392,0.67019921875,0.67019921875),
(0.372549019607843,0.6550234375,0.6550234375),
(0.376470588235294,0.63984375,0.63984375),
(0.380392156862745,0.6246640625,0.6246640625),
(0.384313725490196,0.60948828125,0.60948828125),
(0.388235294117647,0.59430859375,0.59430859375),
(0.392156862745098,0.57912890625,0.57912890625),
(0.396078431372549,0.56394921875,0.56394921875),
(0.4,0.5487734375,0.5487734375),
(0.403921568627451,0.53359375,0.53359375),
(0.407843137254902,0.5184140625,0.5184140625),
(0.411764705882353,0.50323828125,0.50323828125),
(0.415686274509804,0.48805859375,0.48805859375),
(0.419607843137255,0.47287890625,0.47287890625),
(0.423529411764706,0.45769921875,0.45769921875),
(0.427450980392157,0.4425234375,0.4425234375),
(0.431372549019608,0.42734375,0.42734375),
(0.435294117647059,0.4121640625,0.4121640625),
(0.43921568627451,0.39698828125,0.39698828125),
(0.443137254901961,0.381808203125,0.381808203125),
(0.447058823529412,0.366629296875,0.366629296875),
(0.450980392156863,0.35145078125,0.35145078125),
(0.454901960784314,0.336272265625,0.336272265625),
(0.458823529411765,0.32109375,0.32109375),
(0.462745098039216,0.305915234375,0.305915234375),
(0.466666666666667,0.29073671875,0.29073671875),
(0.470588235294118,0.2755578125,0.2755578125),
(0.474509803921569,0.260379296875,0.260379296875),
(0.47843137254902,0.24520078125,0.24520078125),
(0.482352941176471,0.230022265625,0.230022265625),
(0.486274509803922,0.21484375,0.21484375),
(0.490196078431373,0.2265625,0.2265625),
(0.494117647058824,0.23828125,0.23828125),
(0.498039215686275,0.25,0.25),
(0.501960784313725,0.26171875,0.26171875),
(0.505882352941176,0.2734375,0.2734375),
(0.509803921568627,0.28515625,0.28515625),
(0.513725490196078,0.296875,0.296875),
(0.517647058823529,0.30859375,0.30859375),
(0.52156862745098,0.3203125,0.3203125),
(0.525490196078431,0.33203125,0.33203125),
(0.529411764705882,0.34375,0.34375),
(0.533333333333333,0.35546875,0.35546875),
(0.537254901960784,0.3671875,0.3671875),
(0.541176470588235,0.37890625,0.37890625),
(0.545098039215686,0.390625,0.390625),
(0.549019607843137,0.40234375,0.40234375),
(0.552941176470588,0.4140625,0.4140625),
(0.556862745098039,0.42578125,0.42578125),
(0.56078431372549,0.4375,0.4375),
(0.564705882352941,0.44921875,0.44921875),
(0.568627450980392,0.4609375,0.4609375),
(0.572549019607843,0.47265625,0.47265625),
(0.576470588235294,0.484375,0.484375),
(0.580392156862745,0.49609375,0.49609375),
(0.584313725490196,0.5078125,0.5078125),
(0.588235294117647,0.51953125,0.51953125),
(0.592156862745098,0.53125,0.53125),
(0.596078431372549,0.54296875,0.54296875),
(0.6,0.5546875,0.5546875),
(0.603921568627451,0.56640625,0.56640625),
(0.607843137254902,0.578125,0.578125),
(0.611764705882353,0.58984375,0.58984375),
(0.615686274509804,0.6015625,0.6015625),
(0.619607843137255,0.61328125,0.61328125),
(0.623529411764706,0.625,0.625),
(0.627450980392157,0.61458203125,0.61458203125),
(0.631372549019608,0.60416796875,0.60416796875),
(0.635294117647059,0.59375,0.59375),
(0.63921568627451,0.58333203125,0.58333203125),
(0.643137254901961,0.57291796875,0.57291796875),
(0.647058823529412,0.5625,0.5625),
(0.650980392156863,0.55208203125,0.55208203125),
(0.654901960784314,0.54166796875,0.54166796875),
(0.658823529411765,0.53125,0.53125),
(0.662745098039216,0.52083203125,0.52083203125),
(0.666666666666667,0.51041796875,0.51041796875),
(0.670588235294118,0.5,0.5),
(0.674509803921569,0.48958203125,0.48958203125),
(0.67843137254902,0.47916796875,0.47916796875),
(0.682352941176471,0.46875,0.46875),
(0.686274509803922,0.45833203125,0.45833203125),
(0.690196078431373,0.44791796875,0.44791796875),
(0.694117647058824,0.4375,0.4375),
(0.698039215686274,0.42708203125,0.42708203125),
(0.701960784313725,0.41666796875,0.41666796875),
(0.705882352941177,0.40625,0.40625),
(0.709803921568627,0.39583203125,0.39583203125),
(0.713725490196078,0.385416796875,0.385416796875),
(0.717647058823529,0.375,0.375),
(0.72156862745098,0.364583203125,0.364583203125),
(0.725490196078431,0.354166796875,0.354166796875),
(0.729411764705882,0.34375,0.34375),
(0.733333333333333,0.333333203125,0.333333203125),
(0.737254901960784,0.322916796875,0.322916796875),
(0.741176470588235,0.3125,0.3125),
(0.745098039215686,0.302083203125,0.302083203125),
(0.749019607843137,0.291666796875,0.291666796875),
(0.752941176470588,0.28125,0.28125),
(0.756862745098039,0.270833203125,0.270833203125),
(0.76078431372549,0.260416796875,0.260416796875),
(0.764705882352941,0.25,0.25),
(0.768627450980392,0.239583203125,0.239583203125),
(0.772549019607843,0.229166796875,0.229166796875),
(0.776470588235294,0.21875,0.21875),
(0.780392156862745,0.208333203125,0.208333203125),
(0.784313725490196,0.197916796875,0.197916796875),
(0.788235294117647,0.1875,0.1875),
(0.792156862745098,0.177083203125,0.177083203125),
(0.796078431372549,0.166666796875,0.166666796875),
(0.8,0.15625,0.15625),
(0.803921568627451,0.145833203125,0.145833203125),
(0.807843137254902,0.135416796875,0.135416796875),
(0.811764705882353,0.125,0.125),
(0.815686274509804,0.114583203125,0.114583203125),
(0.819607843137255,0.104166796875,0.104166796875),
(0.823529411764706,0.09375,0.09375),
(0.827450980392157,0.083333203125,0.083333203125),
(0.831372549019608,0.072916796875,0.072916796875),
(0.835294117647059,0.0625,0.0625),
(0.83921568627451,0.052083203125,0.052083203125),
(0.843137254901961,0.041666796875,0.041666796875),
(0.847058823529412,0.03125,0.03125),
(0.850980392156863,0.0208333203125,0.0208333203125),
(0.854901960784314,0.0104166796875,0.0104166796875),
(0.858823529411765,0,0),
(0.862745098039216,0.0184151953125,0.0184151953125),
(0.866666666666667,0.0368303515625,0.0368303515625),
(0.870588235294118,0.055245703125,0.055245703125),
(0.874509803921569,0.073660546875,0.073660546875),
(0.87843137254902,0.09207578125,0.09207578125),
(0.882352941176471,0.110491015625,0.110491015625),
(0.886274509803922,0.12890625,0.12890625),
(0.890196078431373,0.147321484375,0.147321484375),
(0.894117647058824,0.16573671875,0.16573671875),
(0.898039215686275,0.184151953125,0.184151953125),
(0.901960784313726,0.202566796875,0.202566796875),
(0.905882352941176,0.22098203125,0.22098203125),
(0.909803921568627,0.239397265625,0.239397265625),
(0.913725490196078,0.2578125,0.2578125),
(0.917647058823529,0.276227734375,0.276227734375),
(0.92156862745098,0.29464296875,0.29464296875),
(0.925490196078431,0.313058203125,0.313058203125),
(0.929411764705882,0.331473046875,0.331473046875),
(0.933333333333333,0.34988828125,0.34988828125),
(0.937254901960784,0.368303515625,0.368303515625),
(0.941176470588235,0.38671875,0.38671875),
(0.945098039215686,0.4051328125,0.4051328125),
(0.949019607843137,0.42355078125,0.42355078125),
(0.952941176470588,0.44196484375,0.44196484375),
(0.956862745098039,0.46037890625,0.46037890625),
(0.96078431372549,0.47879296875,0.47879296875),
(0.964705882352941,0.4972109375,0.4972109375),
(0.968627450980392,0.515625,0.515625),
(0.972549019607843,0.5340390625,0.5340390625),
(0.976470588235294,0.55245703125,0.55245703125),
(0.980392156862745,0.57087109375,0.57087109375),
(0.984313725490196,0.58928515625,0.58928515625),
(0.988235294117647,0.60769921875,0.60769921875),
(0.992156862745098,0.6261171875,0.6261171875),
(0.996078431372549,0.64453125,0.64453125),
(1,0.64453125,0.64453125)),
'blue' : (
(0,1,1),
(0.00392156862745098,0.80569140625,0.80569140625),
(0.00784313725490196,0.7964296875,0.7964296875),
(0.0117647058823529,0.7871640625,0.7871640625),
(0.0156862745098039,0.77790234375,0.77790234375),
(0.0196078431372549,0.76863671875,0.76863671875),
(0.0235294117647059,0.759375,0.759375),
(0.0274509803921569,0.75011328125,0.75011328125),
(0.0313725490196078,0.74084765625,0.74084765625),
(0.0352941176470588,0.7315859375,0.7315859375),
(0.0392156862745098,0.7223203125,0.7223203125),
(0.0431372549019608,0.71305859375,0.71305859375),
(0.0470588235294118,0.70379296875,0.70379296875),
(0.0509803921568627,0.69453125,0.69453125),
(0.0549019607843137,0.68526953125,0.68526953125),
(0.0588235294117647,0.67600390625,0.67600390625),
(0.0627450980392157,0.6667421875,0.6667421875),
(0.0666666666666667,0.6574765625,0.6574765625),
(0.0705882352941176,0.64821484375,0.64821484375),
(0.0745098039215686,0.63894921875,0.63894921875),
(0.0784313725490196,0.6296875,0.6296875),
(0.0823529411764706,0.62042578125,0.62042578125),
(0.0862745098039216,0.61116015625,0.61116015625),
(0.0901960784313725,0.6018984375,0.6018984375),
(0.0941176470588235,0.5926328125,0.5926328125),
(0.0980392156862745,0.58337109375,0.58337109375),
(0.101960784313725,0.57410546875,0.57410546875),
(0.105882352941176,0.56484375,0.56484375),
(0.109803921568627,0.55558203125,0.55558203125),
(0.113725490196078,0.54631640625,0.54631640625),
(0.117647058823529,0.5370546875,0.5370546875),
(0.12156862745098,0.5277890625,0.5277890625),
(0.125490196078431,0.51852734375,0.51852734375),
(0.129411764705882,0.50926171875,0.50926171875),
(0.133333333333333,0.5,0.5),
(0.137254901960784,0.50901953125,0.50901953125),
(0.141176470588235,0.5180390625,0.5180390625),
(0.145098039215686,0.52705859375,0.52705859375),
(0.149019607843137,0.536078125,0.536078125),
(0.152941176470588,0.54509765625,0.54509765625),
(0.156862745098039,0.55412109375,0.55412109375),
(0.16078431372549,0.563140625,0.563140625),
(0.164705882352941,0.57216015625,0.57216015625),
(0.168627450980392,0.5811796875,0.5811796875),
(0.172549019607843,0.59019921875,0.59019921875),
(0.176470588235294,0.59921875,0.59921875),
(0.180392156862745,0.60823828125,0.60823828125),
(0.184313725490196,0.6172578125,0.6172578125),
(0.188235294117647,0.62627734375,0.62627734375),
(0.192156862745098,0.635296875,0.635296875),
(0.196078431372549,0.64431640625,0.64431640625),
(0.2,0.65333984375,0.65333984375),
(0.203921568627451,0.662359375,0.662359375),
(0.207843137254902,0.67137890625,0.67137890625),
(0.211764705882353,0.6803984375,0.6803984375),
(0.215686274509804,0.68941796875,0.68941796875),
(0.219607843137255,0.6984375,0.6984375),
(0.223529411764706,0.70745703125,0.70745703125),
(0.227450980392157,0.7164765625,0.7164765625),
(0.231372549019608,0.72549609375,0.72549609375),
(0.235294117647059,0.734515625,0.734515625),
(0.23921568627451,0.74353515625,0.74353515625),
(0.243137254901961,0.75255859375,0.75255859375),
(0.247058823529412,0.761578125,0.761578125),
(0.250980392156863,0.77059765625,0.77059765625),
(0.254901960784314,0.7796171875,0.7796171875),
(0.258823529411765,0.78863671875,0.78863671875),
(0.262745098039216,0.79765625,0.79765625),
(0.266666666666667,0.80667578125,0.80667578125),
(0.270588235294118,0.8156953125,0.8156953125),
(0.274509803921569,0.82471484375,0.82471484375),
(0.27843137254902,0.833734375,0.833734375),
(0.282352941176471,0.84275390625,0.84275390625),
(0.286274509803922,0.85177734375,0.85177734375),
(0.290196078431373,0.860796875,0.860796875),
(0.294117647058824,0.86981640625,0.86981640625),
(0.298039215686275,0.8788359375,0.8788359375),
(0.301960784313725,0.88785546875,0.88785546875),
(0.305882352941176,0.896875,0.896875),
(0.309803921568627,0.90589453125,0.90589453125),
(0.313725490196078,0.9149140625,0.9149140625),
(0.317647058823529,0.92393359375,0.92393359375),
(0.32156862745098,0.932953125,0.932953125),
(0.325490196078431,0.94197265625,0.94197265625),
(0.329411764705882,0.95099609375,0.95099609375),
(0.333333333333333,0.960015625,0.960015625),
(0.337254901960784,0.96903515625,0.96903515625),
(0.341176470588235,0.9780546875,0.9780546875),
(0.345098039215686,0.98707421875,0.98707421875),
(0.349019607843137,0.99609375,0.99609375),
(0.352941176470588,0.9737734375,0.9737734375),
(0.356862745098039,0.95144921875,0.95144921875),
(0.36078431372549,0.92912890625,0.92912890625),
(0.364705882352941,0.90680859375,0.90680859375),
(0.368627450980392,0.88448828125,0.88448828125),
(0.372549019607843,0.8621640625,0.8621640625),
(0.376470588235294,0.83984375,0.83984375),
(0.380392156862745,0.8175234375,0.8175234375),
(0.384313725490196,0.79519921875,0.79519921875),
(0.388235294117647,0.77287890625,0.77287890625),
(0.392156862745098,0.75055859375,0.75055859375),
(0.396078431372549,0.72823828125,0.72823828125),
(0.4,0.7059140625,0.7059140625),
(0.403921568627451,0.68359375,0.68359375),
(0.407843137254902,0.6612734375,0.6612734375),
(0.411764705882353,0.63894921875,0.63894921875),
(0.415686274509804,0.61662890625,0.61662890625),
(0.419607843137255,0.59430859375,0.59430859375),
(0.423529411764706,0.57198828125,0.57198828125),
(0.427450980392157,0.5496640625,0.5496640625),
(0.431372549019608,0.52734375,0.52734375),
(0.435294117647059,0.5050234375,0.5050234375),
(0.43921568627451,0.48269921875,0.48269921875),
(0.443137254901961,0.46037890625,0.46037890625),
(0.447058823529412,0.43805859375,0.43805859375),
(0.450980392156863,0.41573828125,0.41573828125),
(0.454901960784314,0.3934140625,0.3934140625),
(0.458823529411765,0.37109375,0.37109375),
(0.462745098039216,0.348772265625,0.348772265625),
(0.466666666666667,0.32645078125,0.32645078125),
(0.470588235294118,0.304129296875,0.304129296875),
(0.474509803921569,0.281808203125,0.281808203125),
(0.47843137254902,0.25948671875,0.25948671875),
(0.482352941176471,0.237165234375,0.237165234375),
(0.486274509803922,0.21484375,0.21484375),
(0.490196078431373,0.233370703125,0.233370703125),
(0.494117647058824,0.251897265625,0.251897265625),
(0.498039215686275,0.27042421875,0.27042421875),
(0.501960784313725,0.28895078125,0.28895078125),
(0.505882352941176,0.307477734375,0.307477734375),
(0.509803921568627,0.326004296875,0.326004296875),
(0.513725490196078,0.34453125,0.34453125),
(0.517647058823529,0.363058203125,0.363058203125),
(0.52156862745098,0.381584765625,0.381584765625),
(0.525490196078431,0.40011328125,0.40011328125),
(0.529411764705882,0.41863671875,0.41863671875),
(0.533333333333333,0.4371640625,0.4371640625),
(0.537254901960784,0.45569140625,0.45569140625),
(0.541176470588235,0.47421875,0.47421875),
(0.545098039215686,0.49274609375,0.49274609375),
(0.549019607843137,0.5112734375,0.5112734375),
(0.552941176470588,0.52980078125,0.52980078125),
(0.556862745098039,0.54832421875,0.54832421875),
(0.56078431372549,0.5668515625,0.5668515625),
(0.564705882352941,0.58537890625,0.58537890625),
(0.568627450980392,0.60390625,0.60390625),
(0.572549019607843,0.62243359375,0.62243359375),
(0.576470588235294,0.6409609375,0.6409609375),
(0.580392156862745,0.65948828125,0.65948828125),
(0.584313725490196,0.67801171875,0.67801171875),
(0.588235294117647,0.6965390625,0.6965390625),
(0.592156862745098,0.71506640625,0.71506640625),
(0.596078431372549,0.73359375,0.73359375),
(0.6,0.75212109375,0.75212109375),
(0.603921568627451,0.7706484375,0.7706484375),
(0.607843137254902,0.78917578125,0.78917578125),
(0.611764705882353,0.80769921875,0.80769921875),
(0.615686274509804,0.8262265625,0.8262265625),
(0.619607843137255,0.84475390625,0.84475390625),
(0.623529411764706,0.86328125,0.86328125),
(0.627450980392157,0.84889453125,0.84889453125),
(0.631372549019608,0.83450390625,0.83450390625),
(0.635294117647059,0.8201171875,0.8201171875),
(0.63921568627451,0.80573046875,0.80573046875),
(0.643137254901961,0.79133984375,0.79133984375),
(0.647058823529412,0.776953125,0.776953125),
(0.650980392156863,0.76256640625,0.76256640625),
(0.654901960784314,0.74817578125,0.74817578125),
(0.658823529411765,0.7337890625,0.7337890625),
(0.662745098039216,0.71940234375,0.71940234375),
(0.666666666666667,0.70501171875,0.70501171875),
(0.670588235294118,0.690625,0.690625),
(0.674509803921569,0.67623828125,0.67623828125),
(0.67843137254902,0.66184765625,0.66184765625),
(0.682352941176471,0.6474609375,0.6474609375),
(0.686274509803922,0.63307421875,0.63307421875),
(0.690196078431373,0.61868359375,0.61868359375),
(0.694117647058824,0.604296875,0.604296875),
(0.698039215686274,0.58991015625,0.58991015625),
(0.701960784313725,0.57551953125,0.57551953125),
(0.705882352941177,0.5611328125,0.5611328125),
(0.709803921568627,0.54674609375,0.54674609375),
(0.713725490196078,0.53235546875,0.53235546875),
(0.717647058823529,0.51796875,0.51796875),
(0.72156862745098,0.50358203125,0.50358203125),
(0.725490196078431,0.48919140625,0.48919140625),
(0.729411764705882,0.4748046875,0.4748046875),
(0.733333333333333,0.46041796875,0.46041796875),
(0.737254901960784,0.44602734375,0.44602734375),
(0.741176470588235,0.431640625,0.431640625),
(0.745098039215686,0.41725390625,0.41725390625),
(0.749019607843137,0.40286328125,0.40286328125),
(0.752941176470588,0.3884765625,0.3884765625),
(0.756862745098039,0.374088671875,0.374088671875),
(0.76078431372549,0.359700390625,0.359700390625),
(0.764705882352941,0.3453125,0.3453125),
(0.768627450980392,0.330924609375,0.330924609375),
(0.772549019607843,0.316536328125,0.316536328125),
(0.776470588235294,0.3021484375,0.3021484375),
(0.780392156862745,0.287760546875,0.287760546875),
(0.784313725490196,0.273372265625,0.273372265625),
(0.788235294117647,0.258984375,0.258984375),
(0.792156862745098,0.244596484375,0.244596484375),
(0.796078431372549,0.230208203125,0.230208203125),
(0.8,0.2158203125,0.2158203125),
(0.803921568627451,0.201432421875,0.201432421875),
(0.807843137254902,0.187044140625,0.187044140625),
(0.811764705882353,0.17265625,0.17265625),
(0.815686274509804,0.158268359375,0.158268359375),
(0.819607843137255,0.143880078125,0.143880078125),
(0.823529411764706,0.1294921875,0.1294921875),
(0.827450980392157,0.115104296875,0.115104296875),
(0.831372549019608,0.100716015625,0.100716015625),
(0.835294117647059,0.086328125,0.086328125),
(0.83921568627451,0.071940234375,0.071940234375),
(0.843137254901961,0.057551953125,0.057551953125),
(0.847058823529412,0.0431640625,0.0431640625),
(0.850980392156863,0.028776015625,0.028776015625),
(0.854901960784314,0.01438796875,0.01438796875),
(0.858823529411765,0,0),
(0.862745098039216,0,0),
(0.866666666666667,0,0),
(0.870588235294118,0,0),
(0.874509803921569,0,0),
(0.87843137254902,0,0),
(0.882352941176471,0,0),
(0.886274509803922,0,0),
(0.890196078431373,0,0),
(0.894117647058824,0,0),
(0.898039215686275,0,0),
(0.901960784313726,0,0),
(0.905882352941176,0,0),
(0.909803921568627,0,0),
(0.913725490196078,0,0),
(0.917647058823529,0,0),
(0.92156862745098,0,0),
(0.925490196078431,0,0),
(0.929411764705882,0,0),
(0.933333333333333,0,0),
(0.937254901960784,0,0),
(0.941176470588235,0,0),
(0.945098039215686,0,0),
(0.949019607843137,0,0),
(0.952941176470588,0,0),
(0.956862745098039,0,0),
(0.96078431372549,0,0),
(0.964705882352941,0,0),
(0.968627450980392,0,0),
(0.972549019607843,0,0),
(0.976470588235294,0,0),
(0.980392156862745,0,0),
(0.984313725490196,0,0),
(0.988235294117647,0,0),
(0.992156862745098,0,0),
(0.996078431372549,0,0),
(1,0,0)),
 }

califa = LinearSegmentedColormap('califa', cdict)
vcalifa = LinearSegmentedColormap('vcalifa', vcdict)

maps=[m for m in plt.cm.datad if not m.endswith("_r")]
maps.sort()
maps.append('califa')
maps.append('vcalifa')
l=len(maps)+1

new_cube=1


######## Simulate Bright and Contrast ###########
def cmap_powerlaw_adjust(cmap, a):
    '''
    returns a new colormap based on the one given
    but adjusted via power-law:

    newcmap = oldcmap**a
    '''

    if a < 0.:
        return cmap

    #cdict = cmap #._segmentdata
    cdict = copy.copy(cmap._segmentdata)
    #print cdict['red']
    fn = lambda x : (x[0]**a, x[1], x[2])
    for key in ('red','green','blue'):
        cdict[key] = map(fn, cdict[key])
        cdict[key].sort()
        assert (cdict[key][0]<0 or cdict[key][-1]>1), \
            "Resulting indices extend out of the [0, 1] segment."
    return colors.LinearSegmentedColormap('colormap',cdict,1024)

def cmap_center_adjust(cmap, center_ratio):
    '''
    returns a new colormap based on the one given
    but adjusted so that the old center point higher
    (>0.5) or lower (<0.5)
    '''
    if not (0. < center_ratio) & (center_ratio < 1.):
        return cmap
    a = math.log(center_ratio) / math.log(0.5)
    return cmap_powerlaw_adjust(cmap, a)

def cmap_center_point_adjust(cmap, range, center):
    '''
    converts center to a ratio between 0 and 1 of the
    range given and calls cmap_center_adjust(). returns
    a new adjusted colormap accordingly
    '''
    if not ((range[0] < center) and (center < range[1])):
        return cmap
    return cmap_center_adjust(cmap,
        abs(center - range[0]) / abs(range[1] - range[0]))


def cmap_map(function,cmap):
    """ Applies function (which should operate on vectors of shape 3:
    [r, g, b], on colormap cmap. This routine will break any discontinuous     points in a colormap.
    """
    cdict = cmap._segmentdata
    step_dict = {}
    # Firt get the list of points where the segments start or end
    for key in ('red','green','blue'):         step_dict[key] = map(lambda x: x[0], cdict[key])
    step_list = sum(step_dict.values(), [])
    step_list = np.array(list(set(step_list)))
    # Then compute the LUT, and apply the function to the LUT
    reduced_cmap = lambda step : np.array(cmap(step)[0:3])
    old_LUT = np.array(map( reduced_cmap, step_list))
    new_LUT = np.array(map( function, old_LUT))
    
#    new_LUT=new_LUT_tmp[-1::]
   # new_LUT=np.reverse(new_LUT)
#    print new_LUT.shape()
#    new_LUT=new_LUT[-1:-1:-1]
    # Now try to make a minimal segment definition of the new LUT
    cdict = {}
    for i,key in enumerate(('red','green','blue')):
        this_cdict = {}
        for j,step in enumerate(step_list):
            if step in step_dict[key]:
                this_cdict[step] = new_LUT[j,i]
            elif new_LUT[j,i]!=old_LUT[j,i]:
                this_cdict[step] = new_LUT[j,i]
        colorvector=  map(lambda x: x + (x[1], ), this_cdict.items())
        colorvector.sort()
        cdict[key] = colorvector

    return matplotlib.colors.LinearSegmentedColormap('colormap',cdict,1024)



######### Create Colours ######################
def pastel(colour, weight=2.4):
    """ Convert colour into a nice pastel shade"""
    rgb = np.asarray(colorConverter.to_rgb(colour))
    # scale colour
    maxc = max(rgb)
    if maxc < 1.0 and maxc > 0:
        # scale colour
        scale = 1.0 / maxc
        rgb = rgb * scale
    # now decrease saturation
    total = rgb.sum()
    slack = 0
    for x in rgb:
        slack += 1.0 - x

    # want to increase weight from total to weight
    # pick x s.t.  slack * x == weight - total
    # x = (weight - total) / slack
    x = (weight - total) / slack

    rgb = [0.6*(c + (x * (1.0-c))) for c in rgb]
    return rgb

def get_colours(n):
    """ Return n pastel colours. """
    base = np.asarray([[1,0,0], [0,1,0], [0,0,1]])

    if n <= 3:
        return base[0:n]

    # how many new colours to we need to insert between
    # red and green and between green and blue?
    needed = (((n - 3) + 1) / 2, (n - 3) / 2)

    colours = []
    for start in (0, 1):
        for x in np.linspace(0, 1, needed[start]+2):
            colours.append((base[start] * (1.0 - x)) +
                           (base[start+1] * x))
            
    return [pastel(c) for c in colours[0:n]]



###############################################
def test():
    print 'Test'

def cleanObj():
    global Obj
    global nx,ny
    global j,l,new_cube
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            Obj[jj,ii]=0
    new_cube=1
    animate(j,l)

def allObj():
    global Obj
    global nx,ny,mask
    global j,l,new_cube
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            Obj[jj,ii]=1
    Obj=Obj*mask
    new_cube=1
    animate(j,l)
    
######
def LoadFile():
    global j,nx_med,ny_med,nz_med,mask,click1,Obj,listObj
    global filename,fitsdata,fitscube,fitshdr
    global Wmin,Wmax,Wmin0,Wmax0
    filename = askopenfilename(filetypes=[("allfiles","*"),("pythonfiles","*.py")])
    fitscube,fitshdr=rfits_cube(filename)
    j=58
#    j=1
    click1=0
    nx_med=int(nx/2)
    ny_med=int(ny/2)
    nz_med=int(nz/2)
    fitsdata=fitscube[nz_med,:,:]
    out=np.zeros((ny,nx))
    infinite=np.isfinite(fitsdata,out)
    fitsdata=fitsdata*out
    fitsdata=np.nan_to_num(fitsdata)
    mask=np.zeros((ny,nx))
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            val=fitsdata[jj,ii]
            if (abs(val)<1e308):
                mask[jj,ii]=1
    isSmark=0
    ismark=0
    Obj=np.zeros((ny,nx))
    listObj = []
    listObj.append(Obj)
    animate(j,l)
    if (spec2D==0):
        plot_spec(nx_med,ny_med)


######

###### Create Menubar
def makeMenuBar(self,frame):
    menubar = Tk.Frame(frame,relief='raised',borderwidth=1)
    menubar.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)
		
    mb_file = Tk.Menubutton(menubar,text='File')
    mb_file.pack(side=Tk.LEFT)
    mb_file.menu = Tk.Menu(mb_file)
    
    mb_file.menu.add_command(label='open',command=LoadFile)
    mb_file.menu.add_command(label='close')
    
#    mb_edit = Tk.Menubutton(menubar,text='edit')
#   mb_edit.pack(side=Tk.LEFT)
#    mb_edit.menu = Tk.Menu(mb_edit)
#    mb_edit.menu.add_command(label='copy')
#    mb_edit.menu.add_command(label='paste')
    
#    mb_help = Tk.Menubutton(menubar,text='help')
#    mb_help.pack(padx=25,side=Tk.LEFT)
    
    button1 = Tk.Button(menubar, text='Quit', command=sys.exit)
    button1.pack(side=Tk.RIGHT)

    mb_file['menu'] = mb_file.menu
    #mb_edit['menu'] = mb_edit.menu
    return menubar

###### Delete Menubar


###### Create Menubar
def makeOptFrame(self,frame):
    menubar = Tk.Frame(frame,relief='raised',borderwidth=1)
    menubar.pack(side=Tk.TOP, fill=Tk.Y, expand=1)
		
#    mb_file = Tk.Menubutton(menubar,text='file')
#    mb_file.pack(side=Tk.LEFT)

#    label = Tk.Label(menubar, text='Color Map', width=20)
#    label.pack(side=Tk.TOP)

#    button1 = Tk.Button(menubar, text='Quit', command=sys.exit)
#    button1.pack(side=Tk.BOTTOM)

    return menubar

### START rfits_img
def rfits_img(filename):
    global nx,ny
    # READ FITS FILE
    fitsdata=pyfits.getdata(filename);
    fitshdr=pyfits.getheader(filename);
    nx = fitshdr['NAXIS1']
    ny = fitshdr['NAXIS2']
    out=np.zeros((ny,nx))
    infinite=np.isfinite(fitsdata,out)
    fitsdata=fitsdata*out
    fitsdata=np.nan_to_num(fitsdata)
    return fitsdata,fitshdr
### END rfits_img

### START rfits_img
def rfits_cube(filename):
    global nx,ny,nz,crval,cdelt,crpix
    global Wmin,Wmax,Wmin0,Wmax0
    global new_cube
    new_cube=1
    # READ FITS FILE
    print "Reading cube ",filename
    fitscube=pyfits.getdata(filename);
    fitshdr=pyfits.getheader(filename);
    nx = fitshdr['NAXIS1']
    ny = fitshdr['NAXIS2']
    nz = fitshdr['NAXIS3']
    try:
        crval = fitshdr['CRVAL3']
    except KeyError:
        crval=1
    try:
        cdelt = fitshdr['CDELT3']
    except KeyError:
        cdelt=1

#    crval = fitshdr['CRVAL3']
#    cdelt = fitshdr['CDELT3']
    crpix = 1.0
    #fitshdr['CRPIX3']
    out=np.zeros((nz,ny,nx))    
    infinite=np.isfinite(fitscube,out)
    fitscube=fitscube*out
    fitscube=np.nan_to_num(fitscube)
    Wmin=crval
    Wmax=crval+nz*cdelt
    Wmin0=Wmin
    Wmax0=Wmax
    print "done"
    return fitscube,fitshdr
### END rfits_img

### Create Fake cube
def create_cube(NX,NY,NZ,CRVAL,CDELT,CRPIX):
    global nx,ny,nz,crval,cdelt,crpix    
    global Wmin,Wmax,Wmin0,Wmax0
    global new_cube
    new_cube=1
    print "Creating a fake cube..."
    fitscube=np.ones((NZ,NY,NX))
#    fitshdr=pyfits.getheader(filename);
    nx = NX
    ny = NY
    nz = NZ
    crval = CRVAL
    cdelt = CDELT
    crpix = CRPIX
    fitshdr = {'NAXIS':3}
#    fitshdr['NAXIS']=3
    fitshdr['NAXIS1']=NX
    fitshdr['NAXIS2']=NY
    fitshdr['NAXIS3']=NZ
    fitshdr['CRPIX1']=1
    fitshdr['CDELT1']=1
    fitshdr['CRVAL1']=1
    fitshdr['CRPIX2']=1
    fitshdr['CDELT2']=1
    fitshdr['CRVAL2']=1
    fitshdr['CRPIX3']=CRPIX
    fitshdr['CDELT3']=CDELT
    fitshdr['CRVAL3']=CRVAL
    Wmin=CRVAL
    Wmax=CRVAL+NZ*CDELT
    Wmin0=Wmin
    Wmax0=Wmax
    return fitscube,fitshdr

#print sys.argv

def plot_img(fig,ax,fitsdata,alpha,m):
    fitsdata=fitsdata*mask
    cax = ax.imshow(fitsdata,cmap=plt.get_cmap(m),alpha=alpha,interpolation='nearest')    
    plt.hold=True
    return




def animate(k,l):    
    global mapFig
    global specFig,isSmark,Smark,isSpecFig,Obj
    global Y1,Y2,fixY,var_fix
    global nx_med,ny_med
    global bright, contrast
    global var_invert
    global caxMap,new_cube
    invert=var_invert.get()

    fixY=var_fix.get()
    m=maps[k]
    cmap_name=plt.get_cmap(m)    
    my_str=cmap_name.name
    if (invert==1):
        my_str=my_str+'_r'
    cmap=cm.get_cmap(my_str)
    mod_cmap=cmap_center_adjust(cmap, contrast)

    if (new_cube==1):
        fig1.clear()
        fig1.subplots_adjust(top=0.95,bottom=0.05,left=0.05,right=0.99)
        mapFig = fig1.add_subplot(1,1,1)
        mapFig.clear()
        if (fixY==0):   
            caxMap = mapFig.imshow(fitsdata,cmap=mod_cmap,interpolation='nearest')    
            Y1=caxMap.norm.vmin
            Y2=caxMap.norm.vmax

        else:
            caxMap = mapFig.imshow(fitsdata,cmap=mod_cmap,interpolation='nearest',vmin=Y1,vmax=Y2)    
        fig1.colorbar(caxMap, orientation='vertical', shrink=0.925)
    caxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
    caxMap.set_cmap(mod_cmap) 


    if (new_cube!=1):
        mapFig.get_figure().canvas.draw()
    mapFig.hold=True
    levels = arange(0,1,2)
    if (new_cube==1):
        mapFig.contour(Obj, levels, hold='on', colors = 'k')
    k=0
    XX=[]
    YY=[]
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            val=Obj[jj,ii]
            if (val>0):
                XX.append(ii)
                YY.append(jj)
    nsum=int(Obj.sum())
    if (nsum>0):
        mapFig.scatter(XX,YY,alpha=0.5,s=3,color='black')
    mapFig.set_xlim(0,nx-1)
    mapFig.set_ylim(0,ny-1)
    mapFig.get_figure().canvas.draw()
    XX=np.zeros(2)
    YY=np.zeros(2)
    XX[0]=crval+cdelt*nz_med
    XX[1]=crval+cdelt*nz_med
    ymin,ymax=specFig.get_ylim()
    xmin,xmax=specFig.get_xlim()
    YY[0]=ymin
    YY[1]=ymax
    new_cube=0
    try: 
      saxMap 
    except NameError: 
      print 'saxMap not defined' 
    else:
        saxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
        saxMap.set_cmap(mod_cmap) 
        specFig.get_figure().canvas.draw()    

    
#    plot_spec(nx_med,ny_med)
#    specFig.plot(XX,YY,"o-",color='orange',lw=2,ms=3,alpha=0.4)
#    specFig.set_xlim(xmin,xmax)
#    specFig.set_ylim(ymin,ymax)
#    specFig.get_figure().canvas.draw()


global ii_last,jj_last
ii_last=0
jj_last=0
global count
count=0
def plot_spec(ii,jj):    
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig
    global Y1,Y2,fixY,var_fix,count
    global ii_last,jj_last
    global Wmin,Wmax
    global spec2D
    global type_spectra,j
    global bright,contrast,var_invert
    global saxMap
    invert=var_invert.get()
    spec2D=0
    if ((type_spectra==0) or (type_spectra==1) or (type_spectra==2)):
        fixY=var_fix.get()
        specFig.clear()    
        count=count+1
        s=fitscube[:,jj,ii]
        sout=np.zeros(nz)
        w=np.zeros(nz)
        infinite=np.isfinite(s,sout)
        s=s*sout
        s=np.nan_to_num(s)   
        for iii in range(0,nz):
            val=s[iii]
            w[iii]=crval+cdelt*iii
            if (abs(val)>1e30):
                s[iii]=0
        specFig.plot(w,s,color='black',lw=2.1)
        if (fixY==1):
            specFig.set_ylim(Y1,Y2)
        specFig.set_xlim(Wmin,Wmax)
        specFig.get_figure().canvas.draw()
        XX=np.zeros(1)
        YY=np.zeros(1)
        XX[0]=ii*1.0;
        YY[0]=jj*1.0;

    if (type_spectra==3):
        extent=np.zeros(4)
        extent[0]=Wmin
        extent[1]=Wmax
        extent[2]=0
        extent[3]=nx-1
        i0=int((Wmin-crval)/cdelt)
        i1=int((Wmax-crval)/cdelt)
        m=maps[j]
        cmap_name=plt.get_cmap(m)    
        my_str=cmap_name.name
        if (invert==1):
            my_str=my_str+'_r'
        cmap=cm.get_cmap(my_str)
        mod_cmap=cmap_center_adjust(cmap, contrast)
        map_now=np.swapaxes(fitscube[i0:i1,jj,:],0,1)
        nsize=map_now.shape
        mean=map_now.mean()
        levels=arange(0.01,3*mean,0.01*mean)
        if (fixY==0):  
           caxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,vmin=-0.1*mean,vmax=10*mean,cmap=mod_cmap)    
        else:
           caxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,cmap=mod_cmap,vmin=Y1,vmax=Y2)
        caxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
        caxMap.set_cmap(mod_cmap) 
        specFig.get_figure().canvas.draw()
    if (type_spectra==4):
        extent=np.zeros(4)
        extent[0]=Wmin
        extent[1]=Wmax
        extent[2]=0
        extent[3]=ny-1
        i0=int((Wmin-crval)/cdelt)
        i1=int((Wmax-crval)/cdelt)
        m=maps[j]
        cmap_name=plt.get_cmap(m)    
        my_str=cmap_name.name
        if (invert==1):
            my_str=my_str+'_r'
        cmap=cm.get_cmap(my_str)
        mod_cmap=cmap_center_adjust(cmap, contrast)
        map_now=np.swapaxes(fitscube[i0:i1,:,ii],0,1)
        nsize=map_now.shape
        mean=map_now.mean()
        levels=arange(0.01,3*mean,0.01*mean)
        if (fixY==0):  
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,vmin=-0.1*mean,vmax=10*mean,cmap=mod_cmap)    
        else:
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,cmap=mod_cmap,vmin=Y1,vmax=Y2)
        saxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
        saxMap.set_cmap(mod_cmap) 
        specFig.get_figure().canvas.draw()
    if (type_spectra==5):
        extent=np.zeros(4)
        extent[0]=Wmin
        extent[1]=Wmax
        extent[2]=0
        extent[3]=ny+nx-2
        i0=int((Wmin-crval)/cdelt)
        i1=int((Wmax-crval)/cdelt)
        m=maps[j]
        cmap_name=plt.get_cmap(m)    
        my_str=cmap_name.name
        if (invert==1):
            my_str=my_str+'_r'
        cmap=cm.get_cmap(my_str)
        mod_cmap=cmap_center_adjust(cmap, contrast)
        map_now=np.zeros([nx+ny,i1-i0])
        map_now_x=np.swapaxes(fitscube[i0:i1,:,ii],0,1)
        map_now_y=np.swapaxes(fitscube[i0:i1,jj,:],0,1)
 #       print map_now_x.shape
 #       print map_now_y.shape
  #      print map_now.shape
        map_now[0:ny,:]=np.swapaxes(fitscube[i0:i1,:,ii],0,1)
        cut=map_now[ny:nx+ny,:]
#        print cut.shape
        map_now[ny:nx+ny,:]=np.swapaxes(fitscube[i0:i1,jj,:],0,1)
        nsize=map_now.shape
        mean=map_now.mean()
        levels=arange(0.01,3*mean,0.01*mean)
        if (fixY==0):  
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,vmin=-0.1*mean,vmax=10*mean,cmap=mod_cmap)    
        else:
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,cmap=mod_cmap,vmin=Y1,vmax=Y2)
        saxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
        saxMap.set_cmap(mod_cmap) 


        specFig.get_figure().canvas.draw()    


    ismark=ismark+1
    isSpecFig=isSpecFig+1
    ii_last=ii
    jj_last=jj



def plot_spectra(obj_now,Type,kcolor):    
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig
    global Y1,Y2,fixY,var_fix
    global Wmin,Wmax
    global bright,contrast
    global var_invert,j
    global spec2D
    global saxMap
    spec2D=1

    invert=var_invert.get()
    
#    nsum=int(obj_now.sum())
    nsum=0
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            val=obj_now[jj,ii]
            if (abs(val)>0):
                nsum=nsum+1

    if (nsum==0):
        return

    fig2.subplots_adjust(top=0.95,bottom=0.1,left=0.05,right=0.99)
    specFig = fig2.add_subplot(1,1,1)
    specFig.clear()    
    colours=get_colours(nsum)
    spectra=np.zeros((nsum,nz))
    yp=np.zeros(nsum)
    for i in range(0,nsum-1):
        yp[i]=i    
    m=maps[kcolor]
            
    wmap=np.zeros((nsum,nz))
    ypmap=np.zeros((nsum,nz))
    
    k=0
    w=np.zeros(nz)
    spec_sum=np.zeros(nz)

    fixY=var_fix.get()
    for ii in range(0,nx-1):
        for jj in range(0,ny-1):
            val=obj_now[jj,ii]
            if (abs(val)>0):
                s=fitscube[:,jj,ii]
                sout=np.zeros(nz)
                infinite=np.isfinite(s,sout)
                s=s*sout
                s=np.nan_to_num(s)   
                for iii in range(0,nz):
                    val=s[iii]
                    w[iii]=crval+cdelt*iii
                    wmap[k,iii]=w[iii]
                    ypmap[k,iii]=k
                    if (abs(val)>1e30):
                        s[iii]=0
                    kk=val-k
                    spectra[k,iii]=s[iii]                    
#                    print k,iii,spectra[k,iii];
                if (Type==2):
                    specFig.plot(w,s,color=colours[k],lw=1)
                    Z=k/nsum
                    if (fixY==1):
                        specFig.set_ylim(Y1,Y2)
                    specFig.set_xlim(Wmin,Wmax)
                plt.hold=True
                k=k+1

    if (Type==0):
        if (k>0):
            for iii in range(0,nz):
                spec_sum[iii]=0
                for kk in range(0,k):
                    spec_sum[iii]=spec_sum[iii]+spectra[kk,iii]/k        
        specFig.plot(w,spec_sum,color='Black',lw=2.1)
        if (fixY==1):
            specFig.set_ylim(Y1,Y2)
        specFig.set_xlim(Wmin,Wmax)
    plt.hold=True


                
#    print spectra
    if ((Type==1)  or (Type==3) or (Type==4) or (Type==5)):
        extent=np.zeros(4)
        extent[0]=Wmin
        extent[1]=Wmax
        extent[2]=0
        extent[3]=nsum-1

        i0=int((Wmin-crval)/cdelt)
        i1=int((Wmax-crval)/cdelt)

        m=maps[j]
        cmap_name=plt.get_cmap(m)    
        my_str=cmap_name.name
        if (invert==1):
            my_str=my_str+'_r'
        cmap=cm.get_cmap(my_str)
        mod_cmap=cmap_center_adjust(cmap, contrast)
#        print 'i0='+str(i0)+',i1='+str(i1)
        map_now=spectra[:,i0:i1]
        nsize=map_now.shape
#        print nsize
        mean=map_now.mean()
        levels=arange(0.01,3*mean,0.01*mean)
        if (fixY==0):  
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,vmin=-0.1*mean,vmax=3*mean,cmap=mod_cmap)    
        else:
           saxMap=specFig.imshow(map_now,interpolation='nearest',aspect='auto',extent=extent,cmap=mod_cmap,vmin=Y1,vmax=Y2)

        saxMap.set_clim([Y1*(bright-0.5),Y2/(0.5+bright)])
        saxMap.set_cmap(mod_cmap) 

    specFig.get_figure().canvas.draw()
    ismark=0



#    specFig.imshow(spectra,cmap=plt.get_cmap(m),alpha=1)    


#    print 'isSpecFig=',isSpecFig
# Press a Key
def key(event):
    print "pressed", repr(event.char)," at ", event.xdata, event.ydata

# Click Button
def click(event):
    global specFig,ismark,isSmark,click1,nx_med,ny_med,W1,W2,vW1,vW2
    global cdelt,Smark
    global nx_med,ny_med,count

#    nx_med_now=int(event.xdata);
#    ny_med_now=int(event.ydata);
#    print "PASO ",nx_med,nx_med_now,ny_med,ny_med_now
#    if ((nx_med_now==nx_med) and (ny_med_now==ny_med)):
#        return

    if ((event.key=='m') or (event.button==2)):
        if ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny)):
            nx_med=int(event.xdata);
            ny_med=int(event.ydata);
            isSmark=0
            plot_spec(nx_med,ny_med)
        else:
            if ((event.xdata>crval) and (event.xdata<(crval+cdelt*nz))):
                ismark=0
                W1=event.xdata-cdelt
                W2=event.xdata+cdelt
                #plot_3d_nofill(W1,W2,j)
                Slice(event.xdata)

    if (event.button==3):
        if (not ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny))):
            if ((event.xdata>crval) and (event.xdata<(crval+cdelt*nz))):
                ismark=0
                if (W1>W2):
                    W=W2
                    W2=W1
                    W1=W
                vW1.set(W1)
                vW2.set(W2)                
                Slice_Range(W1,W2)
                #plot_3d_nofill(W1,W2,j)

    if (event.button==3):
        if ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny)):
#            nx_med=int(event.xdata);
#            ny_med=int(event.ydata);
            isSmark=0
            plot_spectra(Obj,type_spectra,j)

    if (event.button==1):
        if ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny)):
            nx_med=int(event.xdata);
            ny_med=int(event.ydata);
            isSmark=1
            if (spec2D==0):
                plot_spec(nx_med,ny_med)
        else:
            if ((event.xdata>crval) and (event.xdata<(crval+cdelt*nz))):
                 if (click1==2):
                    click1=0
                    if (spec2D==0):
                        plot_spec(nx_med,ny_med)
                 if (click1==0):
                    W1=event.xdata 
                    vW1.set(W1)
                    XX=np.zeros(2)
                    YY=np.zeros(2)
                    XX[0]=event.xdata
                    XX[1]=event.xdata
                    ymin,ymax=specFig.get_ylim()
                    xmin,xmax=specFig.get_xlim()
                    YY[0]=ymin
                    YY[1]=ymax                                
                    specFig.plot(XX,YY,"o-",color='red',lw=2,ms=3,alpha=0.4)
                    specFig.set_xlim(xmin,xmax)
                    specFig.set_ylim(ymin,ymax)
                    specFig.get_figure().canvas.draw()                    
                 if (click1==1):
                    W2=event.xdata
                    vW2.set(W2)
                    if (spec2D==0):
                        plot_spec(nx_med,ny_med)
                    specFig.axvspan(W1,W2,color='red',alpha=0.4)
                    ymin,ymax=specFig.get_ylim()
                    xmin,xmax=specFig.get_xlim()
                    specFig.set_xlim(xmin,xmax)
                    specFig.set_ylim(ymin,ymax)
                    specFig.get_figure().canvas.draw()                    

                 click1=click1+1
    
#                print '[',W1,',',W2,']'
#                Slice(event.xdata)

# Movesmod while clicking
def move(event):
    global mapFig,ismark,isSmark,Obj,mask
    global W1,W2,vW1,vW2
    global nx_med,ny_med
    global cObj
    global xdata_old,ydata_old
    

#    if ((xdata_old==xnow) and (ydata_old==ynow)):
#        return
#    x_now=toolbar.x()
#    print 'x= ',x_now
#    print 'x= ',event.xdata,' y= ',event.ydata,' key= ',event.key
    if ((event.key=='a') or (event.button==2)):
        if ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny)):
            xnow=event.xdata
            ynow=event.ydata
            if ((xnow!=xdata_old) or (ynow!=ydata_old)):
                nx_med=int(event.xdata)
                ny_med=int(event.ydata)
                isSmark=0
                plot_spec(nx_med,ny_med)
                xdata_old=xnow
                ydata_old=ynow
        else:
            if ((event.xdata>crval) and (event.xdata<(crval+cdelt*nz))):
                ismark=0
                xnow=event.xdata
                W1=xnow-0.5*cdelt
                W2=xnow+0.5*cdelt
                if ((xdata_old!=xnow)):
                    vW1.set(W1)
                    vW2.set(W2)
                    Slice(xnow)
                    xdata_old=xnow
                    #plot_3d_nofill(W1,W2,j)



    if ((event.xdata>0) and (event.xdata<nx) and (event.ydata>0) and (event.ydata<ny)):
        if ((event.key=='s') or (event.button==1)):
            xnow=event.xdata
            ynow=event.ydata
            if ((xnow!=xdata_old) or (ynow!=ydata_old)):
                nx_med=int(event.xdata)
                ny_med=int(event.ydata)
                cObj=cObj+1
                Obj[ny_med,nx_med]=cObj
                Obj=Obj*mask
                animate(j,l)
                xdata_old=xnow
                ydata_old=ynow

        if ((event.key=='d')):
            xnow=event.xdata
            ynow=event.ydata
            if ((xnow!=xdata_old) or (ynow!=ydata_old)):
                nx_med=int(event.xdata)
                ny_med=int(event.ydata)
                Obj[ny_med,nx_med]=0
                Obj=Obj*mask
                xdata_old=xnow
                ydata_old=ynow
                animate(j,l)
#    xdata_old=xnow
#    ydata_old=ynow
                

def enter_figure(event):
    print 'enter_figure', event.canvas.figure
    event.canvas.figure.patch.set_facecolor('red')
    event.canvas.draw()

def leave_figure(event):
    print 'leave_figure', event.canvas.figure
    event.canvas.figure.patch.set_facecolor('grey')
    event.canvas.draw()

def next():
    global j
    if (j<l-2):
        animate(j+1,l)
    else:
        animate(0,l)
        j=0
    j=j+1

def previous():
    global j
    if (j>1):
        animate(j-1,l)
    else:
        animate(0,l)
        j=0
    j=j-1

def nSlice():
    global j,nz_med,fitsdata,ismark
    global new_cube
    new_cube=1
    ismark=0
    if (nz_med<nz-12):
        nz_med=nz_med+10
        fitsdata=fitscube[nz_med,:,:]
        out=np.zeros((ny,nx))
        infinite=np.isfinite(fitsdata,out)
        fitsdata=fitsdata*out
        fitsdata=np.nan_to_num(fitsdata)
        wave=crval+cdelt*nz_med
#        new_cube=1
#        print wave
        animate(j,l)

def pSlice():
    global j,nz_med,fitsdata,ismark
    global new_cube
    new_cube=1

    ismark=0
    if (nz_med>10):
        nz_med=nz_med-10
        fitsdata=fitscube[nz_med,:,:]
        out=np.zeros((ny,nx))
        infinite=np.isfinite(fitsdata,out)
        fitsdata=fitsdata*out
        fitsdata=np.nan_to_num(fitsdata)
        wave=crval+cdelt*nz_med
#        print wave
        animate(j,l)

def Slice(wave_now):
    global j,nz_med,fitsdata
    global new_cube
    new_cube=1

    i_med=int((wave_now-crval)/cdelt)
    if ((i_med>0) and (i_med<nz)):
        nz_med=i_med
        fitsdata=fitscube[nz_med,:,:]
        out=np.zeros((ny,nx))
        infinite=np.isfinite(fitsdata,out)
        fitsdata=fitsdata*out
        fitsdata=np.nan_to_num(fitsdata)
        wave=crval+cdelt*nz_med
#        print wave
        animate(j,l)

def Slice_Range(wave_1,wave_2):
    global j,nz_med,fitsdata
    global new_cube
    new_cube=1

    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
        tmpdata=fitscube[i1:i2,:,:]
        fitsdata=np.apply_along_axis(sum,0,tmpdata)
#        print fitscube.shape
#        print fitsdata.shape
#        out=np.zeros((ny,nx))
#        infinite=np.isfinite(fitsdata,out)
#        fitsdata=fitsdata*out
        if (i2!=i1):
            fitsdata=fitsdata/(i2-i1)
        fitsdata=np.nan_to_num(fitsdata)
        wave=crval+cdelt*nz_med
#        print wave
        animate(j,l)

def movie():
    global j,nz_med,fitsdata
    global new_cube
    new_cube=1

    for i in range(0,nz-1):        
        fitsdata=fitscube[i,:,:]
        out=np.zeros((ny,nx))
        infinite=np.isfinite(fitsdata,out)
        fitsdata=fitsdata*out
        fitsdata=np.nan_to_num(fitsdata)
        wave=crval+cdelt*i
#        print wave
        animate(j,l)
    fitsdata=fitscube[nz_med,:,:]
    out=np.zeros((ny,nx))
    infinite=np.isfinite(fitsdata,out)
    fitsdata=fitsdata*out
    fitsdata=np.nan_to_num(fitsdata)
    animate(j,l)

def specX():
    global nx_med,ny_med    
    for i in range(0,nx-1):        
        isSmark=0
        plot_spec(i,ny_med)
    plot_spec(nx_med,ny_med)

def specY():
    global nx_med,ny_med    
    for i in range(0,ny-1):
        isSmark=0        
        plot_spec(nx_med,i)
    plot_spec(nx_med,ny_med)
def first():
    global j,ismark
    ismark=0
    j=0
    animate(0,l)

def last():
    global j,ismark
    ismark=0
    j=j-2
    animate(l-2,l)

def change_color(kk):
    global j,ismark
    ismark=0
    j=kk
    animate(kk,l)

#frame.pack()



root = Tk.Tk()
root.wm_title("Cube Explorer")

#gui3d = Tk.Tk()
#gui3d.wm_title("Cube 3D")
fig1b = plt.figure(figsize=(6,6))
#TopFrame3D=Tk.Frame(gui3d)
#TopFrame3D.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
#BottomFrame3D=Tk.Frame(gui3d)
#BottomFrame3D.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
#OptFrame3D=Tk.Frame(gui3d,width=200)
#OptFrame3D=Tk.Frame(TopFrame3D,width=150)
#OptFrame3D.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)
#plotFrame3D=Tk.Frame(gui3d)
#plotFrame3D=Tk.Frame(TopFrame3D)
#plotFrame3D.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)
#canvas2 = FigureCanvasTkAgg(fig1b, master=gui3d)
#canvas2 = FigureCanvasTkAgg(fig1b, master=plotFrame3D)


TopFrame=Tk.Frame(root)
MenuBar=makeMenuBar(root,TopFrame)
TopFrame.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)



OptFrame=Tk.Frame(width=200)
OptMenu=makeOptFrame(root,OptFrame)
OptFrame.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)

MidFrame=Tk.Frame(root, relief='raised',borderwidth=2)
MidFrame.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

plotFrame1 = Tk.Frame(root,relief='raised',borderwidth=1)
plotFrame1.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
plotFrame11 = Tk.Frame(plotFrame1,relief='raised',borderwidth=1,width=5,height=5)
plotFrame11.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)
plotFrame12 = Tk.Frame(plotFrame1,relief='raised',borderwidth=1,width=5,height=5)
plotFrame12.pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)

plotFrame2 = Tk.Frame(root,relief='raised',borderwidth=1)
plotFrame2.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

#plotFrame3 = Tk.Frame(root,relief='raised',borderwidth=1)
#plotFrame3.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

#root.bind("<Destroy>", destroy)


# READ ARGUMENTS
nargs=len(sys.argv)
print nargs
if (nargs==2):
    filename=sys.argv[1]
    fitscube,fitshdr=rfits_cube(filename)
else:
    filename='NONE'
    fitscube,fitshdr=create_cube(50,50,50,3800,1,1)

ismark=0
isSmark=0
isSpecFig=0
j=58
#j=1
click1=0
nx_med=int(nx/2)
ny_med=int(ny/2)
nz_med=int(nz/2)
W1=crval+cdelt*(nz_med-1)
W2=crval+cdelt*(nz_med+1)

fitsdata=fitscube[nz_med,:,:]
out=np.zeros((ny,nx))
infinite=np.isfinite(fitsdata,out)
fitsdata=fitsdata*out
fitsdata=np.nan_to_num(fitsdata)
mask=np.zeros((ny,nx))
Obj=np.zeros((ny,nx))
listObj = []
listObj.append(Obj)
for ii in range(0,nx-1):
    for jj in range(0,ny-1):
        val=fitsdata[jj,ii]
        if (abs(val)<1e308):
            mask[jj,ii]=1

var_fix=Tk.IntVar()
var_invert=Tk.IntVar()



fig1 = plt.figure(figsize=(6,5))
fig1.subplots_adjust(top=0.95,bottom=0.05,left=0.05,right=0.99)

#canvas = plt.FigureCanvas(self,-1,fig1b)

#fig1b.subplots_adjust(top=0.95,bottom=0.05,left=0.05,right=0.99)
fig2 = plt.figure(figsize=(11,5))
fig2.subplots_adjust(top=0.95,bottom=0.1,left=0.1,right=0.99)


#fig1 = plt.figure(figsize=(8,5))
#fig1.subplots_adjust(top=0.95,bottom=0.05,left=0.01,right=0.99)

#j=12
#fig2.subplots_adjust(top=0.95,bottom=0.1,left=0.05,right=0.99)
specFig = fig2.add_subplot(1,1,1)


animate(j,l)
plot_spec(nx_med,ny_med)
#onClick = specFig.get_figure().canvas.mpl_connect('button_press_event',click)
#onMove = specFig.get_figure().canvas.mpl_connect('motion_notify_event',move)


#cursor = Tk.Cursor(mapFig, useblit=True, color='black', linewidth=2)

rangeFrame = Tk.Frame(OptMenu,relief='raised',borderwidth=1)
rangeFrame.pack(side=Tk.TOP, expand=1)
labelR = Tk.Label(rangeFrame, text='Plotting Range', width=15)
labelR.pack(side=Tk.TOP)

labW1=Tk.Label(rangeFrame,text="W1=",width=3,anchor='e')
labW1.pack(side=Tk.LEFT)
vW1=Tk.StringVar()
eb1=Tk.Entry(rangeFrame,textvariable=vW1,width=6)
eb1.pack(side=Tk.LEFT)
vW1.set(W1)
labW2=Tk.Label(rangeFrame,text="W2=",width=3,anchor='s')
labW2.pack(side=Tk.LEFT)
vW2=Tk.StringVar()
eb2=Tk.Entry(rangeFrame,textvariable=vW2,width=6)
eb2.pack(side=Tk.LEFT)
vW2.set(W2)
def setW():
    global mapFig,ismark,isSmark,Obj,mask
    global W1,W2,eb1,eb2
    W1=float(Tk.Entry.get(eb1))
    W2=float(Tk.Entry.get(eb2))
    if (W1>W2):
        W=W2
        W2=W1
        W1=W
        vW1.set(W1)
        vW2.set(W2)
    specFig.axvspan(W1,W2,color='blue',alpha=0.4)
    ymin,ymax=specFig.get_ylim()
    xmin,xmax=specFig.get_xlim()
    specFig.set_xlim(xmin,xmax)
    specFig.set_ylim(ymin,ymax)
    specFig.get_figure().canvas.draw()  
buttonW = Tk.Button(rangeFrame, text='SET', command=setW)
buttonW.pack(side=Tk.RIGHT)

def zoomW():
    global Wmin,Wmax
    global Wmin0,Wmax0
    global mapFig,ismark,isSmark,Obj,mask
    global W1,W2,eb1,eb2,Y1,Y2,fixY
    W1=float(Tk.Entry.get(eb1))
    W2=float(Tk.Entry.get(eb2))
    if (W1>W2):
        W=W2
        W2=W1
        W1=W    
    Wmin=W1
    Wmax=W2
    if (fixY==1):
        specFig.set_ylim(Y1,Y2)
    specFig.set_xlim(Wmin,Wmax)
    specFig.get_figure().canvas.draw()  

buttonZW = Tk.Button(rangeFrame, text='Zoom', command=zoomW)
buttonZW.pack(side=Tk.RIGHT)
def UzoomW():
    global Wmin,Wmax
    global Wmin0,Wmax0
    global W1,W2,Y1,Y2,fixY
    Wmin=Wmin0
    Wmax=Wmax0
    if (fixY==1):
        specFig.set_ylim(Y1,Y2)
    specFig.set_xlim(Wmin,Wmax)
    specFig.get_figure().canvas.draw()  


buttonUW = Tk.Button(rangeFrame, text='Release', command=UzoomW)
buttonUW.pack(side=Tk.RIGHT)



YrangeFrame = Tk.Frame(OptMenu,relief='raised',borderwidth=1)
YrangeFrame.pack(side=Tk.TOP, expand=1)
labelW = Tk.Label(YrangeFrame, text='Plotting Yrange', width=12)
labelW.pack(side=Tk.TOP)
YlabW1=Tk.Label(YrangeFrame,text="Y1=",width=3,anchor='e')
YlabW1.pack(side=Tk.LEFT)
vY1=Tk.StringVar()
yeb1=Tk.Entry(YrangeFrame,textvariable=vY1,width=6)
yeb1.pack(side=Tk.LEFT)
vY1.set(Y1)
YlabW2=Tk.Label(YrangeFrame,text="Y2=",width=3,anchor='s')
YlabW2.pack(side=Tk.LEFT)
vY2=Tk.StringVar()
yeb2=Tk.Entry(YrangeFrame,textvariable=vY2,width=6)
yeb2.pack(side=Tk.LEFT)
vY2.set(Y2)
def setY():
    global mapFig,ismark,isSmark,Obj,mask
    global Y1,Y2,yeb1,yeb2
    global j,l,nx_med,ny_med
    Y1=float(Tk.Entry.get(yeb1))
    Y2=float(Tk.Entry.get(yeb2))
    if (Y1>Y2):
        W=Y2
        Y2=Y1
        Y1=W
    vY1.set(Y1)
    vY2.set(Y2)
    animate(j,l)
    plot_spec(nx_med,ny_med)

buttonY = Tk.Button(YrangeFrame, text='SET', command=setY)
buttonY.pack(side=Tk.RIGHT)
CB_setY = Tk.Checkbutton(YrangeFrame, text="Fix Y", variable=var_fix)
CB_setY.pack(side=Tk.LEFT)

vBC1=Tk.StringVar()
vBC2=Tk.StringVar()

BCrangeFrame = Tk.Frame(OptMenu,relief='raised',borderwidth=1)
BCrangeFrame.pack(side=Tk.TOP, expand=1)
labelC = Tk.Label(BCrangeFrame, text='Bright/Contrast', width=40)
labelC.pack(side=Tk.TOP, expand=1, fill=Tk.X)
BCrangeFrame1 = Tk.Frame(BCrangeFrame,relief='raised',borderwidth=1)
BCrangeFrame1.pack(side=Tk.TOP, expand=1,fill=Tk.X)
BCrangeFrame1a = Tk.Frame(BCrangeFrame,relief='raised',borderwidth=1)
BCrangeFrame1a.pack(side=Tk.TOP, expand=1,fill=Tk.X)
BCrangeFrame2 = Tk.Frame(BCrangeFrame,relief='raised',borderwidth=1)
BCrangeFrame2.pack(side=Tk.TOP, expand=1,fill=Tk.X)
BCrangeFrame2a = Tk.Frame(BCrangeFrame,relief='raised',borderwidth=1)
BCrangeFrame2a.pack(side=Tk.TOP, expand=1,fill=Tk.X)
BCrangeFrame3 = Tk.Frame(BCrangeFrame,relief='raised',borderwidth=1)
BCrangeFrame3.pack(side=Tk.TOP, expand=1,fill=Tk.X)
BClabW1=Tk.Label(BCrangeFrame1,text="Bright=",width=3,anchor='e')
BClabW1.pack(side=Tk.LEFT,expand=1,fill=Tk.X)
ceb1=Tk.Entry(BCrangeFrame1,textvariable=vBC1,width=6)
ceb1.pack(side=Tk.LEFT,expand=1,fill=Tk.X)
vBC1.set(bright)
BClabW2=Tk.Label(BCrangeFrame2,text="Contrast=",width=3,anchor='s')
BClabW2.pack(side=Tk.LEFT,expand=1,fill=Tk.X)
ceb2=Tk.Entry(BCrangeFrame2,textvariable=vBC2,width=6)
ceb2.pack(side=Tk.LEFT,expand=1,fill=Tk.X)
vBC2.set(contrast)
def setBC():
    global mapFig,ismark,isSmark,Obj,mask
    global bright,contrast,ceb1,ceb2
    global j,l,nx_med,ny_med
    bright=float(Tk.Entry.get(ceb1))
    contrast=float(Tk.Entry.get(ceb2))
    if (bright<0.01):
        bright=0.01
    if (bright>0.99):
        bright=1
    if (contrast<0.01):
        contrast=0.01
    if (contrast>0.98):
        contrast=0.99
    vBC1.set(bright)
    vBC2.set(contrast)
    animate(j,l)
#    plot_spec(nx_med,ny_med)

def setB_Scale(bright_now):
    global mapFig,ismark,isSmark,Obj,mask
    global bright,contrast,ceb1,ceb2
    global j,l,nx_med,ny_med
    global vBC1,vBC2
    vBC1.set(float(bright_now))
    bright_new=float(Tk.Entry.get(ceb1))
    if (bright != bright_new):
        bright=bright_new
        animate(j,l)
#    animate(j,l)
#    print bright,bright_now
#    animate(j,l)


def setC_Scale(contrast_now):
    global mapFig,ismark,isSmark,Obj,mask
    global bright,contrast,ceb1,ceb2
    global j,l,nx_med,ny_med
    global vBC1,vBC2
    vBC2.set(contrast_now)
    contrast_new=float(Tk.Entry.get(ceb2))
    if (contrast != contrast_new):
        contrast=contrast_new
        animate(j,l)



scaleBC1 = Tk.Scale(BCrangeFrame1a, from_=0.0, to=1.0, resolution=0.01, orient=Tk.HORIZONTAL, variable=vBC1, showvalue=0, relief='raised', command=setB_Scale)
scaleBC1.pack(side=Tk.TOP,expand=1,fill=Tk.X)
scaleBC2 = Tk.Scale(BCrangeFrame2a, from_=0.0, to=1.0, resolution=0.01, orient=Tk.HORIZONTAL, variable=vBC2, showvalue=0, relief='raised', command=setC_Scale)
scaleBC2.pack(side=Tk.TOP,expand=1,fill=Tk.X)
CB_setInv = Tk.Checkbutton(BCrangeFrame3, text="Invert", variable=var_invert)
CB_setInv.pack(side=Tk.LEFT)
buttonBC = Tk.Button(BCrangeFrame3, text='SET', command=setBC)
buttonBC.pack(side=Tk.LEFT,expand=1,fill=Tk.X)

nFig3D=1
def saveFig3D():
    global nFig3D
    figName='IFSview3D_'+str(nFig3D)+'.jpg'
    vv.screenshot(figName)
    print ' '+figName+' figure saved'
    nFig3D=nFig3D+1
def saveFig3D_pdf():
    global nFig3D
    figName='IFSview3D_'+str(nFig3D)+'.pdf'
    vv.screenshot(figName)
    print ' '+figName+' figure saved'
    nFig3D=nFig3D+1
startMov=0
def startMovFig3D():
    global rec,startMov
    a = vv.gca()
    f = vv.gcf()
    rec = vv.record(a)
    startMov=1
    print 'Start Recording Movie'
def stopMovFig3D_gif():
    global rec,startMov
    global nFig3D
    figName='IFSview3D_'+str(nFig3D)+'.gif'    
    if (startMov==1):
        print 'Stop Recording Movie'
        rec.Stop()
        rec.Export(figName)
        print ' '+figName+' movie saved'
    startMov=0
    nFig3D=nFig3D+1
def stopMovFig3D_swf():
    global rec,startMov
    global nFig3D
    figName='IFSview3D_'+str(nFig3D)+'.swf'    
    if (startMov==1):
        print 'Stop Recording Movie'
        rec.Stop()
        rec.Export(figName)
        print ' '+figName+' movie saved'
    startMov=0
    nFig3D=nFig3D+1
def addColormapEditor():
    a = vv.gca()
    f = vv.gcf()
    vv.ColormapEditor(a)
        
    


colormapFrame = Tk.Frame(OptMenu,relief='raised',borderwidth=1)
colormapFrame.pack(side=Tk.LEFT, expand=1)
label = Tk.Label(colormapFrame, text='Color Map', width=10)
label.pack(side=Tk.TOP)
colormap = Tk.Listbox(colormapFrame, selectmode=Tk.SINGLE,
                      height=6,width=12)
scrollbar = Tk.Scrollbar(colormapFrame,orient=Tk.VERTICAL)
scrollbar['command'] = colormap.yview
colormap.config(yscrollcommand=scrollbar.set)
colormap.pack(side=Tk.LEFT)
scrollbar.pack(side=Tk.LEFT,fill=Tk.Y)

#for text, cont in CONTROLS:
#    colormap.insert(Tk.END, text)
for ll in range(0,l-1):
    m=maps[ll]
    text=(ll,m)
    colormap.insert(Tk.END,text)

#text=(l,'califa')
#colormap.insert(Tk.END,califa)

colormap['selectmode']=Tk.SINGLE
def colormap_Click(event):
    val = 'none'
    for i in colormap.curselection():
        val = colormap.get(i)
        nval=val[0]
        change_color(nval)
colormap.bind("<ButtonRelease-1>", colormap_Click)

#vv.screenshot('IFSview3D.jpg')
#FIG3D FRAME




#    colormap.bind(m,change_color(ll))
#    colormap.bind(m)


# a tk.DrawingArea


canvas = FigureCanvasTkAgg(fig1, master=plotFrame11)
canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
canvasb = FigureCanvasTkAgg(fig2, master=plotFrame12)
canvasb.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

toolbar = NavigationToolbar2TkAgg( canvas, MidFrame)
toolbar2 = NavigationToolbar2TkAgg( canvasb, plotFrame2)
#toolbar3d = NavigationToolbar2TkAgg( canvas2, BottomFrame3D)

#canvas2 = FigureCanvasTkAgg(fig1b, master=plotFrame2)
#canvas2.get_tk_widget().pack(side=Tk.LEFT, fill=Tk.BOTH, expand=1)



        
#button2 = Tk.Button(master=root, text='NEXT', command=next)
#button2.pack(side=Tk.RIGHT)
#button2 = Tk.Button(master=root, text='LAST', command=last)
#button2.pack(side=Tk.RIGHT)

###mbs1=  Tk.Menubutton (master=root, text='Slice', relief='raised')

def setSpec_0():
    global type_spectra
    type_spectra=0
    print 'Single Spectrum representation'
def setSpec_1():
    global type_spectra
    type_spectra=1
    print 'RSS image'
def setSpec_2():
    global type_spectra
    type_spectra=2
    print 'All Spectra represenation'
def setSpec_3():
    global type_spectra
    type_spectra=3
    print 'X axis RSS image'
def setSpec_4():
    global type_spectra
    type_spectra=4
    print 'Y axis RSS image'
def setSpec_5():
    global type_spectra
    type_spectra=5
    print 'X/Y axis RSS image'


mbs2=  Tk.Menubutton (MenuBar, text='Spectral Representation')
mbs2.grid()
mbs2.menu  =  Tk.Menu ( mbs2, tearoff = 0 )
mbs2["menu"]  =  mbs2.menu
mbs2.menu.add_command( label='Single', command=setSpec_0)
mbs2.menu.add_command( label='RSS image', command=setSpec_1)
mbs2.menu.add_command( label='All Spec', command=setSpec_2)
mbs2.menu.add_command( label='X axis cut', command=setSpec_3)
mbs2.menu.add_command( label='Y axis cut', command=setSpec_4)
mbs2.menu.add_command( label='X/Y axis cut', command=setSpec_5)
mbs2.pack(side=Tk.LEFT)


mbs3=  Tk.Menubutton (MenuBar, text='Spaxel Selection')
mbs3.grid()
mbs3.menu  =  Tk.Menu ( mbs3, tearoff = 0 )
mbs3["menu"]  =  mbs3.menu
mbs3.menu.add_command( label='Clear', command=cleanObj)
mbs3.menu.add_command( label='Select All', command=allObj)
mbs3.pack(side=Tk.LEFT)


mbs1=  Tk.Menubutton (MenuBar, text='Slice')
mbs1.grid()
mbs1.menu  =  Tk.Menu ( mbs1, tearoff = 0 )
mbs1["menu"]  =  mbs1.menu
mbs1.menu.add_command( label='>>', command=nSlice)
mbs1.menu.add_command( label='<<', command=pSlice)
mbs1.menu.add_command( label='movie', command=movie)
mbs1.menu.add_command( label='specX', command=specX)
mbs1.menu.add_command( label='specY', command=specY)
mbs1.pack(side=Tk.RIGHT)

#mbs=  Tk.Menubutton (master=root, text='Change Colormap', relief='raised')
mbs=  Tk.Menubutton (MenuBar, text='Change Colormap')
mbs.grid()
mbs.menu  =  Tk.Menu ( mbs, tearoff = 0 )
mbs["menu"]  =  mbs.menu
mbs.menu.add_command( label='>>', command=next)
mbs.menu.add_command( label='<<', command=previous)
mbs.menu.add_command( label='First', command=first)
mbs.menu.add_command( label='Last', command=last)
mbs.pack(side=Tk.RIGHT)




canvas.show()
canvasb.show()
#canvas2.show()

toolbar.update()
toolbar2.update()
canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
canvasb._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
#canvas2._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

change_color(j)

#################################
# 3D PLOT
def plot_3d_scatter(wave_1,wave_2,cut,jcm):
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig,W1,W2
    global nx,ny,nz
    m=maps[jcm]
    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
#        tmpdata=fitscube[i1:i2,:,:]
        fig = plt.figure()
        #fig.add_subplot(1,2,2)
        ax = Axes3D(fig)
#        ax = fig.gca(projection='3d')
        k=0
        NC=20
        step=int((i2-i1)/NC)
        if (step<3):
            i2=i1+3
            step=1
        for zs in range(i1,i2,step):
            k=0
            xs=[]
            ys=[]
            ZS=[]
            F=[]
            for ii in range(0,nx):
                for jj in range(0,ny):
                    val=fitscube[zs,jj,ii]                    
                    if (val>cut):
                        xs.append(ii)
                        ys.append(jj)

                        if (val>1):
                            val=1
                        if (val<0):
                            val=0
                        F.append(val)
                        k=k+1
                        XS=[]
                        YS=[]
            wave=crval+cdelt*zs
            ax.scatter(xs,ys,wave,alpha=0.1,s=5,c=F)

    ax.set_xlim3d(0,nx)
    ax.set_ylim3d(0,ny)
    ax.set_zlim3d(W1,W2)
    ax.set_xlabel('X label')
    ax.set_ylabel('Y label')
    ax.set_zlabel('Z label')
    plt.show()


def plot_3d(wave_1,wave_2,cut,jcm):
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig,W1,W2
    global nx,ny,nz
    m=maps[jcm]
    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
        XX=np.zeros((ny,nx))
        YY=np.zeros((ny,nx))
        fig = plt.figure(2)
        ax = Axes3D(fig)
#        ax = fig.gca(projection='3d')
        k=0
        levels=arange(0.05,1.2,0.05)
        for ii in range(0,nx):
            for jj in range(0,ny):                
                YY[jj,ii]=jj
                XX[jj,ii]=ii        
        k=0
        for zs in range(i1,i2):
            tmpdata=fitscube[zs,:,:]
            wave=crval+cdelt*zs
            alpha=0.5+0.5/(i2-i1)
            if (alpha>0.8):
                alpha=0.8
#            cset=ax.contourf(XX,YY,tmpdata,levels,zdir='z',offset=wave,lw=cdelt,alpha=alpha,hold='on',cmap=plt.get_cmap(m,len(levels)-1))
            cset=ax.contour(XX,YY,tmpdata,levels,zdir='z',offset=wave,lw=cdelt,alpha=alpha,hold='on',cmap=plt.get_cmap(m))
#            cset=ax.contourf(XX,YY,tmpdata,levels,zdir='z',offset=k,lw=cdelt,alpha=alpha,hold='on',cmap=plt.get_cmap('jet',len(levels)-1))
            k=k+1

    ax.set_xlim3d(0,nx)
    ax.set_ylim3d(0,ny)
    ax.set_zlim3d(W1,W2)
    ax.set_xlabel('X label')
    ax.set_ylabel('Y label')
    ax.set_zlabel('wavelength label')

    plt.show()

def plot_3d_fill(wave_1,wave_2,jcm):
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig,W1,W2
    global nx,ny,nz
    NC=20
    m=maps[jcm]
    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i
    wave_1=crval+cdelt*i1
    wave_2=crval+cdelt*i2

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
        XX=np.zeros((ny,nx))
        YY=np.zeros((ny,nx))
        #fig1b.subplots_adjust(top=0.95,bottom=0.05,left=0.05,right=0.99)
#        ax3d = fig1b.add_subplot(1,1,1,projection='3d')
#        ax3d = fig1b.gca(projection='3d')
        ax3d = Axes3D(fig1b)
        ax3d.clear()
 #       onClick = ax3d.get_figure().canvas.mpl_connect('button_press_event',click)
 #       onMove = ax3d.get_figure().canvas.mpl_connect('motion_notify_event',move)
        k=0
        for ii in range(0,nx):
            for jj in range(0,ny):                
                YY[jj,ii]=jj
                XX[jj,ii]=ii        
        k=0

        i_med=int(0.5*(i1+i2))
        offset=np.ones((ny,nx))
        wave=crval+cdelt*i1
        tmpdata=fitsdata*mask 
        vmax=tmpdata.max()
        vmin=tmpdata.min()        
        tmpdata1=tmpdata+wave*offset 
        levels=arange(wave+0.05*(i2-i1),wave+vmax,0.05*(i2-i1))
        cset=ax3d.contourf(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt,alpha=0.9,cmap=plt.get_cmap(m,len(levels)-1))
        tmpdata=fitscube[i_med,:,:]
        offset=np.ones((ny,nx))
        tmpdata=tmpdata*mask 
        vmax=tmpdata.max()
        vmin=tmpdata.min()        
        step=int((i2-i1)/NC)
        if (step<3):
            i2=i1+3
            step=1


        for zs in range(i1,i2,step):
            tmpdata=fitscube[zs,:,:]
            wave=crval+cdelt*zs
            tmpdata=tmpdata*mask 
            tmpdata1=tmpdata+wave*offset 
#            levels=arange(wave+0.05,wave+vmax,0.05)
            levels=arange(wave+0.05,wave+vmax,(vmax-0.05)/NC)
            #print levels
            #print tmpdata1[35,35]
            alpha=0.5+0.5/(i2-i1)
            if (alpha>0.8):
                alpha=0.8
            cset=ax3d.contourf(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt,alpha=0.5,cmap=plt.get_cmap(m,len(levels)-1))
         #   cset=ax.contour(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt,alpha=0.1,cmap=plt.get_cmap(m,len(levels)-1),extend3d=True)
            k=k+1
    ax3d.set_xlim3d(0,nx)
    ax3d.set_ylim3d(0,ny)
    ax3d.set_zlim3d(wave_1,wave_2)
    ax3d.set_xlabel('X label')
    ax3d.set_ylabel('Y label')
    ax3d.set_zlabel('wavelength label')
    ax3d.get_figure().canvas.draw()                
#            if (zs==i1):
#                plt.show()
#            else:
#        plt.show()

#a = vv.gca()
def plot_3d_nofill(wave_1,wave_2,jcm):
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig,W1,W2
    global nx,ny,nz,a,contrast
    invert=var_invert.get()
    fixY=var_fix.get()
    m=maps[jcm]
    cmap_name=plt.get_cmap(m)    
    my_str=cmap_name.name
    if (invert==1):
        my_str=my_str+'_r'
    cmap=cm.get_cmap(my_str)
    mod_cmap=cmap_center_adjust(cmap, contrast)

    NC=20
    m=maps[jcm]
    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i
    wave_1=crval+cdelt*i1
    wave_2=crval+cdelt*i2

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
        XX=np.zeros((ny,nx))
        YY=np.zeros((ny,nx))
        #tmpdata=np.fliplr(fitscube[i1:i2,:,:])
        tmpdata=fitscube[i1:i2,:,:]
        
        
#        app = vv.use()
#matplotlib.use('TkAgg')
        vv.clf()
#vv.xlabel('x axis')
#vv.ylabel('y axis')
#vv.zlabel('z axis')

# show
        t = vv.volshow(tmpdata, renderStyle='mip')
#        t.colormap = vv.CM_JET

        cdict = copy.copy(mod_cmap._segmentdata)    
        a_red=np.asarray(cdict['red'],float)
        a_green=np.asarray(cdict['green'],float)
        a_blue=np.asarray(cdict['blue'],float)
        
        A_red=a_red[:,1]
        A_green=a_green[:,1]
        A_blue=a_blue[:,1]
        n_c=A_red.shape
#        n_cc=n_c[0]
#        A_cmap=np.array([3,n_c])
        A_cmap=np.zeros((n_c[0],3))
        for ii in range(0,n_c[0]):
           A_cmap[ii][0]=A_red[ii]
           A_cmap[ii][1]=A_green[ii]
           A_cmap[ii][2]=A_blue[ii]
            
        #t.colormap=A_cmap
         
        a_cmap=tuple(tuple(x) for x in A_cmap)

        t.colormap=a_cmap
#        print A_cmap,a_cmap,t.colormap
#        print A_red,A_green,A_blue
#        print t.colormap
#        t.colormap = cmap.datad

#        a = vv.gca()
        #a.camera.fov = 0
        #vv.screenshot('IFSview3D.jpg')
        #vv.ColormapEditor(a)
#       app.Run()
        

def plot_3d_nofill_old(wave_1,wave_2,jcm):
    global fitscube,mapFig,ismark,mark
    global specFig,isSpecFig,W1,W2
    global nx,ny,nz
    NC=20
    m=maps[jcm]
    wave_now=0.5*(wave_2+wave_1)
    i_med=int((wave_now-crval)/cdelt)
    i1=int((wave_1-crval)/cdelt)
    i2=int((wave_2-crval)/cdelt)
    if (i1>i2):
        i=i2
        i2=i1
        i1=i
    wave_1=crval+cdelt*i1
    wave_2=crval+cdelt*i2

    if ((i1>0) and (i2<nz)):
        nz_med=i_med
        XX=np.zeros((ny,nx))
        YY=np.zeros((ny,nx))
        #fig1b.subplots_adjust(top=0.95,bottom=0.05,left=0.05,right=0.99)
        #ax3d = fig1b.add_subplot(1,1,1,projection='3d')
#        ax3d = fig1b.gca(projection='3d')        
        ax3d = Axes3D(fig1b)
        ax3d.clear()
        ax3d.cla()
        ax3d.mouse_init()

        k=0
        for ii in range(0,nx):
            for jj in range(0,ny):                
                YY[jj,ii]=jj
                XX[jj,ii]=ii        
        k=0

        i_med=int(0.5*(i1+i2))
        offset=np.ones((ny,nx))
        wave=crval+cdelt*i1
        tmpdata=fitsdata*mask 
        vmax=tmpdata.max()
        vmin=tmpdata.min()        
        tmpdata1=tmpdata+wave*offset 
        levels=arange(wave+0.05*(i2-i1),wave+vmax,0.05*(i2-i1))
        #cset=ax3d.contour(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt,alpha=0.9,cmap=plt.get_cmap(m,len(levels)-1))
#        cset=ax3d.contour(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt,alpha=0.9,cmap=plt.get_cmap(m,len(levels)-1))
        tmpdata=fitscube[i_med,:,:]
        offset=np.ones((ny,nx))
        tmpdata=tmpdata*mask 
        vmax=tmpdata.max()
        vmin=tmpdata.min()        
        step=int((i2-i1)/NC)
        if (step<1):
            i2=i1+1
            step=1
            wave_2=crval+cdelt*i2

        for zs in range(i1,i2,step):
            tmpdata=fitscube[zs,:,:]
            wave=crval+cdelt*zs
            tmpdata=tmpdata*mask 
            tmpdata1=tmpdata+wave*offset 
            levels=arange(wave+0.05,wave+vmax,(vmax-0.05)/NC)
            #print levels
            #print tmpdata1[35,35]
            alpha=0.5+0.5/(i2-i1)
            if (alpha>0.8):
                alpha=0.8
            cset=ax3d.contour(XX,YY,tmpdata1,levels,zdir='z',lw=cdelt*NC,alpha=0.5,cmap=plt.get_cmap(m,len(levels)-1))
            k=k+1
    ax3d.set_xlim3d(0,nx)
    ax3d.set_ylim3d(0,ny)
    ax3d.set_zlim3d(wave_1,wave_2)
    ax3d.set_xlabel('X label')
    ax3d.set_ylabel('Y label')
    ax3d.set_zlabel('wavelength label')
#    ax3d.legend()
#    ax3d.get_figure().canvas.draw()                
    ax3d.get_figure().canvas.show()                
    #Axes3D.mouse_init()
#            if (zs==i1):
#    plt.show()
#            else:
#        plt.show()
#    ax3d.show()
                        


#################################

onClick_map = fig1.canvas.mpl_connect('button_press_event',click)
onMove_map = fig1.canvas.mpl_connect('motion_notify_event',move)

onClick = fig2.canvas.mpl_connect('button_press_event',click)
onMove = fig2.canvas.mpl_connect('motion_notify_event',move)
#plot_3d_nofill(W1,W2,j)


#onClick_3d = fig1b.canvas.mpl_connect('button_press_event',click)
#onMove_3d = fig1b.canvas.mpl_connect('motion_notify_event',move)
#toolbar2 = NavigationToolbar2TkAgg( canvas2, plotFrame3)

#gui3d.show()

Tk.mainloop()

#root.mainloop()
#gui3d.mainloop()



